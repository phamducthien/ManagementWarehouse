<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#
const string inputFile = @"D:\Projects\QLKho\ql-kho-ban-le\Source\QuanLyKhoV3\WH.Entity\WHEntities.edmx";
var FilePathSave = this;
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(FilePathSave);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}


WriteHeader(codeStringGenerator, fileManager);
string entityName ="";
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	var simpleProperties = typeMapper.GetSimpleProperties(entity);
	var edmProperty = simpleProperties.ToList()[0];
	var navigationProperties = typeMapper.GetNavigationProperties(entity);
	var navigationPropertieAddeds = new List<string>();
    fileManager.StartNewFile(entity.Name + "Service.cs");
    BeginNamespace(code);
	entityName = "'"+code.Escape(entity).ToString()+"'";
#>
public partial interface I<#=code.Escape(entity)#>Service : IService
{
	bool Exist(string id);
	bool Exist(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate);

	<#=code.Escape(entity)#> CreateNew();
    List<<#=code.Escape(entity)#>> FindAll();
	List<<#=code.Escape(entity)#>> Search(string textSearch);
	List<<#=code.Escape(entity)#>> Search(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate,string textSearch);
    List<<#=code.Escape(entity)#>> Search(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate);
	
	<#=code.Escape(entity)#> Find(string idUnit);
	<#=code.Escape(entity)#> Find(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate);

	//<#=code.Escape(entity)#> CloneNew(<#=code.Escape(entity)#> obj<#=code.Escape(entity)#>);
	//<#=code.Escape(entity)#> CloneUpdate(<#=code.Escape(entity)#> obj<#=code.Escape(entity)#>);
	<#=code.Escape(entity)#> Clone(<#=code.Escape(entity)#> obj<#=code.Escape(entity)#>);
	List< <#=code.Escape(entity)#>> Clone(IList<<#=code.Escape(entity)#>> list<#=code.Escape(entity)#>s);

    MethodResult Add(<#=code.Escape(entity)#> model, bool isCommited = false,bool isAddChild = false);
    MethodResult Modify(<#=code.Escape(entity)#> model, bool isCommited= false,bool isModifyChild = false);
	MethodResult Remove(<#=code.Escape(entity)#> model, bool isCommited = false,bool isRemoveChild = false);
    MethodResult Remove(string idUnit, bool isCommited = false,bool isRemoveChild = false);
}

public partial class <#=code.Escape(entity)#>Service : global::Service.Pattern.Service, I<#=code.Escape(entity)#>Service
{
	protected string userId = SessionModel.CurrentSession?.UserId;
	protected I<#=code.Escape(entity)#>Repository _<#=code.Escape(entity)#>Repository;
	<#= codeStringGenerator.NavigationPropertyRepositoryNew(navigationProperties) #>

	public <#=code.Escape(entity)#>Service(IUnitOfWorkAsync unitOfWork)
            : base(unitOfWork)
    {
    }

    protected override void InitRepositories()
    {
        _<#=code.Escape(entity)#>Repository = new <#=code.Escape(entity)#>Repository(this._dataContext, this._unitOfWork);
		<#= codeStringGenerator.NavigationPropertyRepositoryEnd(navigationProperties) #>
    }
	
	public bool Exist(string id)
    {
		return _<#=code.Escape(entity)#>Repository.Exist(id);
    }

	public bool Exist(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate)
	{
		return _<#=code.Escape(entity)#>Repository.Exist(predicate);
	}

    public <#=code.Escape(entity)#> CreateNew()
    {
        return _<#=code.Escape(entity)#>Repository.CreateNew();
    }

	public List<<#=code.Escape(entity)#>> FindAll()
	{
		return _<#=code.Escape(entity)#>Repository.FindAll();
	}

	public List<<#=code.Escape(entity)#>> Search(string textSearch)
    {
        return _<#=code.Escape(entity)#>Repository.Search(textSearch);
    }

	public List<<#=code.Escape(entity)#>> Search(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate,string textSearch)
	{
		  return _<#=code.Escape(entity)#>Repository.Search(predicate, textSearch);
	}

		public <#=code.Escape(entity)#> Find(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate)
        {
           return _<#=code.Escape(entity)#>Repository.getObject(predicate);
        }

        public List<<#=code.Escape(entity)#>> Search(Expression<Func<<#=code.Escape(entity)#>, bool>> predicate)
        {
            return _<#=code.Escape(entity)#>Repository.Search(predicate);
        }

        //public <#=code.Escape(entity)#> CloneNew(<#=code.Escape(entity)#> obj<#=code.Escape(entity)#>)
       // {
       //     return _<#=code.Escape(entity)#>Repository.CloneNew(obj<#=code.Escape(entity)#>);
       // }

	//	public <#=code.Escape(entity)#> CloneUpdate(<#=code.Escape(entity)#> obj<#=code.Escape(entity)#>)
	//	{
	//		  return _<#=code.Escape(entity)#>Repository.CloneUpdate(obj<#=code.Escape(entity)#>);
	//	}

		public <#=code.Escape(entity)#> Clone(<#=code.Escape(entity)#> obj<#=code.Escape(entity)#>)
		{
			return _<#=code.Escape(entity)#>Repository.Clone(obj<#=code.Escape(entity)#>);
		}

        public List<<#=code.Escape(entity)#>> Clone(IList<<#=code.Escape(entity)#>> list<#=code.Escape(entity)#>s)
        {
            return _<#=code.Escape(entity)#>Repository.Clone(list<#=code.Escape(entity)#>s);
        }

    public <#=code.Escape(entity)#> Find(string idUnit)
    {
		return _<#=code.Escape(entity)#>Repository.getObject(idUnit);
    }

	public MethodResult Add(<#=code.Escape(entity)#> entity, bool isCommited,bool isAddChild)
    {
		MethodResult result = MethodResult.Succeed;
		try
		{
			if(isCommited)
				_unitOfWork.BeginTransaction();

			entity.Validate();

			_<#=code.Escape(entity)#>Repository.Insert(Clone(entity));
			if (SaveChanges() <= 0)
			{
				ThrowException("Không thể thêm dữ liệu <#= entityName #>.");
			}

			if(isAddChild)
			{
			<#= codeStringGenerator.NavigationPropertyListChildInsert(navigationProperties) #>

				if (SaveChanges() <= 0)
				{
					ThrowException("Không thể thêm dữ liệu con <#= entityName #>.");
				}
			}

			if(isCommited)
					_unitOfWork.Commit();
        }
		catch (DbEntityValidationException exception)
		{
    	        var ex = HandleDbEntityValidationException(exception);

    	        if (_unitOfWork != null) _unitOfWork.Rollback();
    	        ErrMsg = ex.Message;
    	        result = MethodResult.Failed;
		 }
		catch (DbUpdateException exception)
		{
                var ex = HandleDbUpdateException(exception);

                if (_unitOfWork != null) _unitOfWork.Rollback();
                ErrMsg = ex.Message;
                result = MethodResult.Failed;
		}
        return result;
    }

	public MethodResult Modify(<#=code.Escape(entity)#> entity, bool isCommited,bool isModifyChild)
	{
            MethodResult result = MethodResult.Succeed;
            try
            {

             if(isCommited)
				_unitOfWork.BeginTransaction();

                entity.Validate();

                _<#=code.Escape(entity)#>Repository.Update(Clone(entity));
				if (SaveChanges() <= 0)
                {
                    ThrowException("Không thể sửa dữ liệu <#= entityName #>.");
                }

				if(isModifyChild)
				{
				<#= codeStringGenerator.NavigationPropertyListChildUpdate(navigationProperties) #>

					 if (SaveChanges() <= 0)
					{
						ThrowException("Không thể sửa dữ liệu con <#= entityName #>.");
					}
				}

               	if(isCommited)
					_unitOfWork.Commit();
            }
            catch (DbEntityValidationException exception)
    	    {
    	        var ex = HandleDbEntityValidationException(exception);

    	        if (_unitOfWork != null) _unitOfWork.Rollback();
    	        ErrMsg = ex.Message;
    	        result = MethodResult.Failed;
    	    }
    	    catch (DbUpdateException exception)
    	    {
                var ex = HandleDbUpdateException(exception);

                if (_unitOfWork != null) _unitOfWork.Rollback();
                ErrMsg = ex.Message;
                result = MethodResult.Failed;
            }
            return result;
        }

        public MethodResult Remove(string idUnit, bool isCommited,bool isRemoveChild)
        {
            MethodResult result = MethodResult.Succeed;

            try
            {
				if(isCommited)
						_unitOfWork.BeginTransaction();


                <#=code.Escape(entity)#> entity = Find(idUnit);

                if (entity == null)
                {
                    ThrowException("Dữ liệu <#= entityName #> này không tồn tại trong hệ thống.");
                }
				if(isRemoveChild)
				{
				<#= codeStringGenerator.NavigationPropertyListChildDelete(navigationProperties) #>

				    if (SaveChanges() <= 0)
					{
						ThrowException("Không thể xóa dữ liệu con <#= entityName #>.");
					}
				}

                _<#=code.Escape(entity)#>Repository.Delete(Clone(entity));

                if (SaveChanges() <= 0)
                {
                    ThrowException("Không thể xóa dữ liệu <#= entityName #>.");
                }

				if(isCommited)
						_unitOfWork.Commit();
            }
            catch (DbEntityValidationException exception)
    	    {
    	        var ex = HandleDbEntityValidationException(exception);

    	        if (_unitOfWork != null) _unitOfWork.Rollback();
    	        ErrMsg = ex.Message;
    	        result = MethodResult.Failed;
    	    }
    	    catch (DbUpdateException exception)
    	    {
                var ex = HandleDbUpdateException(exception);

                if (_unitOfWork != null) _unitOfWork.Rollback();
                ErrMsg = ex.Message;
                result = MethodResult.Failed;
            }
            return result;
        }

		public MethodResult Remove(<#=code.Escape(entity)#> model, bool isCommited,bool isRemoveChild)
        {
            MethodResult result = MethodResult.Succeed;

            try
            {
                if(isCommited)
						_unitOfWork.BeginTransaction();


                <#=code.Escape(entity)#> entity = Find(model.IDUnit);

                if (entity == null)
                {
                    ThrowException("Dữ liệu <#= entityName #> này không tồn tại trong hệ thống.");
                }

				if(isRemoveChild)
				{
				<#= codeStringGenerator.NavigationPropertyListChildDelete(navigationProperties) #>

					if (SaveChanges() <= 0)
					{
						ThrowException("Không thể xóa dữ liệu con <#= entityName #>.");
					}
				}
                _<#=code.Escape(entity)#>Repository.Delete(Clone(entity));

                if (SaveChanges() <= 0)
                {
                    ThrowException("Không thể xóa dữ liệu <#= entityName #>.");
                }

               	if(isCommited)
					_unitOfWork.Commit();
            }
            catch (DbEntityValidationException exception)
    	    {
    	        var ex = HandleDbEntityValidationException(exception);

    	        if (_unitOfWork != null) _unitOfWork.Rollback();
    	        ErrMsg = ex.Message;
    	        result = MethodResult.Failed;
    	    }
    	    catch (DbUpdateException exception)
    	    {
                var ex = HandleDbUpdateException(exception);

                if (_unitOfWork != null) _unitOfWork.Rollback();
                ErrMsg = ex.Message;
                result = MethodResult.Failed;
            }
            return result;
        }
}
<#
    EndNamespace(code);
}

foreach (var complex in typeMapper.GetItemsToGenerate<ComplexType>(itemCollection))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var complexProperties = typeMapper.GetComplexProperties(complex);
    var propertiesWithDefaultValues = typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var simpleProperties = typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any())
    {
        foreach(var edmProperty in simpleProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
#>
    <#=codeStringGenerator.Property(edmProperty)#>
<#
        }
    }
#>
}
<#
    EndNamespace(code);
}

foreach (var enumType in typeMapper.GetEnumItemsToGenerate(itemCollection))
{
    fileManager.StartNewFile(enumType.Name + ".cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
[Flags]
<#
    }
#>
<#=codeStringGenerator.EnumOpening(enumType)#>
{
<#
    var foundOne = false;
    
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
        foundOne = true;
#>
    <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#
    }

    if (foundOne)
    {
        this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    }
#>
}
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// Service Generated By Nick Nguyen
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.UnitOfWork;
using Service.Pattern;
using WH.Entity;
using WH.Model;
using WH.Service.Repository;
using System.Data.Entity.Validation;
using System.Data.Entity.Infrastructure;
using WH.Service.Service;
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    public string Property(EdmProperty edmProperty)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }
	//Primarykey
	 public string PropertyPrimarykey(EdmProperty edmProperty,EntityType Entity)
    {
		if(_ef.IsKey(edmProperty))
		{
        return string.Format(
            CultureInfo.InvariantCulture,
            ",obj{0}.{1}",
				 _code.Escape(Entity),
            _code.Escape(edmProperty));
		}
		return string.Empty;
    }
	//Primarykey List
	public string PropertyPrimarykey(EntityType Entity)
    {
		string listKey = string.Empty;
		foreach(var edmProperty in  _typeMapper.GetSimpleProperties(Entity))
        {
			listKey +=PropertyPrimarykey(edmProperty,Entity);
        }
		return listKey.Remove(0,1);
    }
    public string NavigationProperty(NavigationProperty navProp)
    {
        var endType = _typeMapper.GetTypeName(navProp.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForNavigationProperty(navProp)),
            navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navProp),
            _code.SpaceAfter(Accessibility.ForGetter(navProp)),
            _code.SpaceAfter(Accessibility.ForSetter(navProp)));
    }
	//Primarykey
	 public string NavigationPropertyPrimarykey(EdmProperty edmProperty,NavigationProperty navProp)
    {
		if(_ef.IsKey(edmProperty))
		{
        return string.Format(
            CultureInfo.InvariantCulture,
            ",obj.{0}",
            _code.Escape(edmProperty));
		}
		return string.Empty;
    }
	//Primarykey List
	public string NavigationPropertyPrimarykey(NavigationProperty navProp)
    {
		string listKey = string.Empty;
		foreach(var edmProperty in  _typeMapper.GetSimpleProperties(navProp.ToEndMember.GetEntityType()))
        {
			listKey +=NavigationPropertyPrimarykey(edmProperty,navProp);
        }
		return listKey.Remove(0,1);
    }

	//List Insert
	public string NavigationPropertyListChildInsert(NavigationProperty navProp)
    {
		if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
		{
			return 	"List<"+navProp.ToEndMember+"> lst"+navProp+" = _"+navProp.ToEndMember+"Repository.Clone(entity."+navProp+");\n\t foreach( var obj in lst"+navProp+" ) \n{\n"+navProp.ToEndMember+" obj"+navProp.ToEndMember+" = _"+navProp.ToEndMember+"Repository.CloneNew(obj);\n if (obj"+navProp.ToEndMember+" != null)\n{\n _"+navProp.ToEndMember+"Repository.Insert(obj"+navProp.ToEndMember+");\n}\n}\n\n";
		}
		return string.Empty;
    }
	//List Insert
	public string NavigationPropertyListChildInsert(IEnumerable<NavigationProperty> lstNavigationProperties)
    {
		string lst = string.Empty;
		if (!lstNavigationProperties.Any()) return lst;
		var ListNavigationPropertyAddeds = new List<string>();
		foreach(NavigationProperty navProp in lstNavigationProperties)
        {
				if( ListNavigationPropertyAddeds.Find(s=>s.Equals(navProp.ToString()))==null)
				{
					lst+=NavigationPropertyListChildInsert(navProp);
				}
				ListNavigationPropertyAddeds.Add(navProp.ToString());
		}
		ListNavigationPropertyAddeds = null;
		return lst;
	}

	//List Update
	public string NavigationPropertyListChildUpdate(NavigationProperty navProp)
    {
		if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
		{
			return 	"List<"+navProp.ToEndMember+"> lst"+navProp+" = _"+navProp.ToEndMember+"Repository.Clone(entity."+navProp+");\n\t foreach( var obj in lst"+navProp+" ) \n{\n"+navProp.ToEndMember+" obj"+navProp.ToEndMember+" = _"+navProp.ToEndMember+"Repository.CloneUpdate(obj);\n if (obj"+navProp.ToEndMember+" != null)\n{\n _"+navProp.ToEndMember+"Repository.Update(obj"+navProp.ToEndMember+");\n}\n}\n\n";
		}
		return string.Empty;
    }
	//List Update
	public string NavigationPropertyListChildUpdate(IEnumerable<NavigationProperty> lstNavigationProperties)
    {
		string lst = string.Empty;
		if (!lstNavigationProperties.Any()) return lst;
		var ListNavigationPropertyAddeds = new List<string>();
		foreach(NavigationProperty navProp in lstNavigationProperties)
        {
				if( ListNavigationPropertyAddeds.Find(s=>s.Equals(navProp.ToString()))==null)
				{
					lst+=NavigationPropertyListChildUpdate(navProp);
				}
				ListNavigationPropertyAddeds.Add(navProp.ToString());
		}
		ListNavigationPropertyAddeds = null;
		return lst;
	}
	//List Delete
	public string NavigationPropertyListChildDelete(NavigationProperty navProp)
    {
		if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
		{
			//return 	"List<"+navProp.ToEndMember+"> lst"+navProp.ToEndMember+" = _"+navProp.ToEndMember+"Repository.Clone(entity."+navProp+");\n\t foreach( var obj in lst"+navProp.ToEndMember+" ) {"+navProp.ToEndMember+" obj"+navProp.ToEndMember+" = _"+navProp.ToEndMember+"Repository.Find("+NavigationPropertyPrimarykey(navProp)+"); _"+navProp.ToEndMember+"Repository.Delete(obj"+navProp.ToEndMember+");}\n\t";
			return 	"List<"+navProp.ToEndMember+"> lst"+navProp+" = _"+navProp.ToEndMember+"Repository.Clone(entity."+navProp+");\n\t foreach( var obj in lst"+navProp+" ) \n{\n"+navProp.ToEndMember+" obj"+navProp.ToEndMember+" = _"+navProp.ToEndMember+"Repository.Clone(obj);\n if (obj"+navProp.ToEndMember+" != null)\n{\n _"+navProp.ToEndMember+"Repository.Delete(obj"+navProp.ToEndMember+");\n}\n}\n\n";
		}
		return string.Empty;
    }
	//List Delete
	public string NavigationPropertyListChildDelete(IEnumerable<NavigationProperty> lstNavigationProperties)
    {
		string lst = string.Empty;
		if (!lstNavigationProperties.Any()) return lst;
		var ListNavigationPropertyAddeds = new List<string>();
		foreach(NavigationProperty navProp in lstNavigationProperties)
        {
				if( ListNavigationPropertyAddeds.Find(s=>s.Equals(navProp.ToString()))==null)
				{
					lst+=NavigationPropertyListChildDelete(navProp);
				}
				ListNavigationPropertyAddeds.Add(navProp.ToString());
		}
		ListNavigationPropertyAddeds = null;
		return lst;
	}
    //Add New Repository
	public string NavigationPropertyRepositoryNew(NavigationProperty navProp)
    {
		if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
			return string.Format(CultureInfo.InvariantCulture,"	protected I{0}Repository  _{0}Repository;\n\t",_code.Escape(navProp.ToEndMember));
		return string.Empty;
    }
	//List New Repository
	public string NavigationPropertyRepositoryNew(IEnumerable<NavigationProperty> lstNavigationProperties)
    {
		string lst = string.Empty;
		if (!lstNavigationProperties.Any()) return lst;
		var ListNavigationPropertyAddeds = new List<string>();
		foreach(NavigationProperty navProp in lstNavigationProperties)
        {
				if( ListNavigationPropertyAddeds.Find(s=>s.Equals(navProp.ToEndMember.ToString()))==null)
				{
					lst+=NavigationPropertyRepositoryNew(navProp);
				}
				ListNavigationPropertyAddeds.Add(navProp.ToEndMember.ToString());
		}
		ListNavigationPropertyAddeds = null;
		return lst;
	}
	//Init Repository
	public string NavigationPropertyRepositoryEnd(NavigationProperty navProp)
    {
		if (navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
			return string.Format(CultureInfo.InvariantCulture,"	_{0}Repository = new {0}Repository(this._dataContext, this._unitOfWork);\n\t\t",_code.Escape(navProp.ToEndMember));
		return string.Empty;
    }
	//List Init Repository
	public string NavigationPropertyRepositoryEnd(IEnumerable<NavigationProperty> lstNavigationProperties)
    {
		string lst = string.Empty;
		if (!lstNavigationProperties.Any()) return lst;
		var ListNavigationPropertyAddeds = new List<string>();
		foreach(NavigationProperty navProp in lstNavigationProperties)
        {
				if( ListNavigationPropertyAddeds.Find(s=>s.Equals(navProp.ToEndMember.ToString()))==null)
				{
					lst+=NavigationPropertyRepositoryEnd(navProp);
				}
				ListNavigationPropertyAddeds.Add(navProp.ToEndMember.ToString());
		}
		ListNavigationPropertyAddeds = null;
		return lst;
	}
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}partial class {2}{3}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity),
            _code.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)));
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + TypeMapper.FixNamespaces(parameter.RawClrTypeName) + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} virtual DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public static string FixNamespaces(string typeName)
    {
        return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            typeName = FixNamespaces(typeName);

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>