//------------------------------------------------------------------------------
// <auto-generated>
// Service Generated By Nick Nguyen
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.UnitOfWork;
using Service.Pattern;
using WH.Entity;
using WH.Model;
using WH.Service.Repository;
using System.Data.Entity.Validation;
using System.Data.Entity.Infrastructure;
using WH.Service.Service;
namespace WH.Service.Service
{
    public partial interface IMATHANGService : IService
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<MATHANG, bool>> predicate);
    
    	MATHANG CreateNew();
        List<MATHANG> FindAll();
    	List<MATHANG> Search(string textSearch);
    	List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate,string textSearch);
        List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate);
    	
    	MATHANG Find(string idUnit);
    	MATHANG Find(Expression<Func<MATHANG, bool>> predicate);
    
    	//MATHANG CloneNew(MATHANG objMATHANG);
    	//MATHANG CloneUpdate(MATHANG objMATHANG);
    	MATHANG Clone(MATHANG objMATHANG);
    	List< MATHANG> Clone(IList<MATHANG> listMATHANGs);
    
        MethodResult Add(MATHANG model, bool isCommited = false,bool isAddChild = false);
        MethodResult Modify(MATHANG model, bool isCommited= false,bool isModifyChild = false);
    	MethodResult Remove(MATHANG model, bool isCommited = false,bool isRemoveChild = false);
        MethodResult Remove(string idUnit, bool isCommited = false,bool isRemoveChild = false);
    }
    
    public partial class MATHANGService : global::Service.Pattern.Service, IMATHANGService
    {
    	protected string userId = SessionModel.CurrentSession?.UserId;
    	protected IMATHANGRepository _MATHANGRepository;
    		protected IHOADONHAPKHOCHITIETRepository  _HOADONHAPKHOCHITIETRepository;
		protected IHOADONNHAPXUATCHITIETRepository  _HOADONNHAPXUATCHITIETRepository;
		protected IHOADONXUATKHOCHITIETRepository  _HOADONXUATKHOCHITIETRepository;
		protected IKHOMATHANGRepository  _KHOMATHANGRepository;
		protected IMATHANGKHUYENMAIRepository  _MATHANGKHUYENMAIRepository;
	
    
    	public MATHANGService(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
        protected override void InitRepositories()
        {
            _MATHANGRepository = new MATHANGRepository(this._dataContext, this._unitOfWork);
    			_HOADONHAPKHOCHITIETRepository = new HOADONHAPKHOCHITIETRepository(this._dataContext, this._unitOfWork);
			_HOADONNHAPXUATCHITIETRepository = new HOADONNHAPXUATCHITIETRepository(this._dataContext, this._unitOfWork);
			_HOADONXUATKHOCHITIETRepository = new HOADONXUATKHOCHITIETRepository(this._dataContext, this._unitOfWork);
			_KHOMATHANGRepository = new KHOMATHANGRepository(this._dataContext, this._unitOfWork);
			_MATHANGKHUYENMAIRepository = new MATHANGKHUYENMAIRepository(this._dataContext, this._unitOfWork);
		
        }
    	
    	public bool Exist(string id)
        {
    		return _MATHANGRepository.Exist(id);
        }
    
    	public bool Exist(Expression<Func<MATHANG, bool>> predicate)
    	{
    		return _MATHANGRepository.Exist(predicate);
    	}
    
        public MATHANG CreateNew()
        {
            return _MATHANGRepository.CreateNew();
        }
    
    	public List<MATHANG> FindAll()
    	{
    		return _MATHANGRepository.FindAll();
    	}
    
    	public List<MATHANG> Search(string textSearch)
        {
            return _MATHANGRepository.Search(textSearch);
        }
    
    	public List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate,string textSearch)
    	{
    		  return _MATHANGRepository.Search(predicate, textSearch);
    	}
    
    		public MATHANG Find(Expression<Func<MATHANG, bool>> predicate)
            {
               return _MATHANGRepository.getObject(predicate);
            }
    
            public List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate)
            {
                return _MATHANGRepository.Search(predicate);
            }
    
            //public MATHANG CloneNew(MATHANG objMATHANG)
           // {
           //     return _MATHANGRepository.CloneNew(objMATHANG);
           // }
    
    	//	public MATHANG CloneUpdate(MATHANG objMATHANG)
    	//	{
    	//		  return _MATHANGRepository.CloneUpdate(objMATHANG);
    	//	}
    
    		public MATHANG Clone(MATHANG objMATHANG)
    		{
    			return _MATHANGRepository.Clone(objMATHANG);
    		}
    
            public List<MATHANG> Clone(IList<MATHANG> listMATHANGs)
            {
                return _MATHANGRepository.Clone(listMATHANGs);
            }
    
        public MATHANG Find(string idUnit)
        {
    		return _MATHANGRepository.getObject(idUnit);
        }
    
    	public MethodResult Add(MATHANG entity, bool isCommited,bool isAddChild)
        {
    		MethodResult result = MethodResult.Succeed;
    		try
    		{
    			if(isCommited)
    				_unitOfWork.BeginTransaction();
    
    			entity.Validate();
    
    			_MATHANGRepository.Insert(Clone(entity));
    			if (SaveChanges() <= 0)
    			{
    				ThrowException("Không thể thêm dữ liệu 'MATHANG'.");
    			}
    
    			if(isAddChild)
    			{
    			List<HOADONHAPKHOCHITIET> lstHOADONHAPKHOCHITIETs = _HOADONHAPKHOCHITIETRepository.Clone(entity.HOADONHAPKHOCHITIETs);
	 foreach( var obj in lstHOADONHAPKHOCHITIETs ) 
{
HOADONHAPKHOCHITIET objHOADONHAPKHOCHITIET = _HOADONHAPKHOCHITIETRepository.CloneNew(obj);
 if (objHOADONHAPKHOCHITIET != null)
{
 _HOADONHAPKHOCHITIETRepository.Insert(objHOADONHAPKHOCHITIET);
}
}

List<HOADONNHAPXUATCHITIET> lstHOADONNHAPXUATCHITIETs = _HOADONNHAPXUATCHITIETRepository.Clone(entity.HOADONNHAPXUATCHITIETs);
	 foreach( var obj in lstHOADONNHAPXUATCHITIETs ) 
{
HOADONNHAPXUATCHITIET objHOADONNHAPXUATCHITIET = _HOADONNHAPXUATCHITIETRepository.CloneNew(obj);
 if (objHOADONNHAPXUATCHITIET != null)
{
 _HOADONNHAPXUATCHITIETRepository.Insert(objHOADONNHAPXUATCHITIET);
}
}

List<HOADONXUATKHOCHITIET> lstHOADONXUATKHOCHITIETs = _HOADONXUATKHOCHITIETRepository.Clone(entity.HOADONXUATKHOCHITIETs);
	 foreach( var obj in lstHOADONXUATKHOCHITIETs ) 
{
HOADONXUATKHOCHITIET objHOADONXUATKHOCHITIET = _HOADONXUATKHOCHITIETRepository.CloneNew(obj);
 if (objHOADONXUATKHOCHITIET != null)
{
 _HOADONXUATKHOCHITIETRepository.Insert(objHOADONXUATKHOCHITIET);
}
}

List<KHOMATHANG> lstKHOMATHANGs = _KHOMATHANGRepository.Clone(entity.KHOMATHANGs);
	 foreach( var obj in lstKHOMATHANGs ) 
{
KHOMATHANG objKHOMATHANG = _KHOMATHANGRepository.CloneNew(obj);
 if (objKHOMATHANG != null)
{
 _KHOMATHANGRepository.Insert(objKHOMATHANG);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs);
	 foreach( var obj in lstMATHANGKHUYENMAIs ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.CloneNew(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Insert(objMATHANGKHUYENMAI);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs1 = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs1);
	 foreach( var obj in lstMATHANGKHUYENMAIs1 ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.CloneNew(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Insert(objMATHANGKHUYENMAI);
}
}


    
    				if (SaveChanges() <= 0)
    				{
    					ThrowException("Không thể thêm dữ liệu con 'MATHANG'.");
    				}
    			}
    
    			if(isCommited)
    					_unitOfWork.Commit();
            }
    		catch (DbEntityValidationException exception)
    		{
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
    		 }
    		catch (DbUpdateException exception)
    		{
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
    		}
            return result;
        }
    
    	public MethodResult Modify(MATHANG entity, bool isCommited,bool isModifyChild)
    	{
                MethodResult result = MethodResult.Succeed;
                try
                {
    
                 if(isCommited)
    				_unitOfWork.BeginTransaction();
    
                    entity.Validate();
    
                    _MATHANGRepository.Update(Clone(entity));
    				if (SaveChanges() <= 0)
                    {
                        ThrowException("Không thể sửa dữ liệu 'MATHANG'.");
                    }
    
    				if(isModifyChild)
    				{
    				List<HOADONHAPKHOCHITIET> lstHOADONHAPKHOCHITIETs = _HOADONHAPKHOCHITIETRepository.Clone(entity.HOADONHAPKHOCHITIETs);
	 foreach( var obj in lstHOADONHAPKHOCHITIETs ) 
{
HOADONHAPKHOCHITIET objHOADONHAPKHOCHITIET = _HOADONHAPKHOCHITIETRepository.CloneUpdate(obj);
 if (objHOADONHAPKHOCHITIET != null)
{
 _HOADONHAPKHOCHITIETRepository.Update(objHOADONHAPKHOCHITIET);
}
}

List<HOADONNHAPXUATCHITIET> lstHOADONNHAPXUATCHITIETs = _HOADONNHAPXUATCHITIETRepository.Clone(entity.HOADONNHAPXUATCHITIETs);
	 foreach( var obj in lstHOADONNHAPXUATCHITIETs ) 
{
HOADONNHAPXUATCHITIET objHOADONNHAPXUATCHITIET = _HOADONNHAPXUATCHITIETRepository.CloneUpdate(obj);
 if (objHOADONNHAPXUATCHITIET != null)
{
 _HOADONNHAPXUATCHITIETRepository.Update(objHOADONNHAPXUATCHITIET);
}
}

List<HOADONXUATKHOCHITIET> lstHOADONXUATKHOCHITIETs = _HOADONXUATKHOCHITIETRepository.Clone(entity.HOADONXUATKHOCHITIETs);
	 foreach( var obj in lstHOADONXUATKHOCHITIETs ) 
{
HOADONXUATKHOCHITIET objHOADONXUATKHOCHITIET = _HOADONXUATKHOCHITIETRepository.CloneUpdate(obj);
 if (objHOADONXUATKHOCHITIET != null)
{
 _HOADONXUATKHOCHITIETRepository.Update(objHOADONXUATKHOCHITIET);
}
}

List<KHOMATHANG> lstKHOMATHANGs = _KHOMATHANGRepository.Clone(entity.KHOMATHANGs);
	 foreach( var obj in lstKHOMATHANGs ) 
{
KHOMATHANG objKHOMATHANG = _KHOMATHANGRepository.CloneUpdate(obj);
 if (objKHOMATHANG != null)
{
 _KHOMATHANGRepository.Update(objKHOMATHANG);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs);
	 foreach( var obj in lstMATHANGKHUYENMAIs ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.CloneUpdate(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Update(objMATHANGKHUYENMAI);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs1 = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs1);
	 foreach( var obj in lstMATHANGKHUYENMAIs1 ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.CloneUpdate(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Update(objMATHANGKHUYENMAI);
}
}


    
    					 if (SaveChanges() <= 0)
    					{
    						ThrowException("Không thể sửa dữ liệu con 'MATHANG'.");
    					}
    				}
    
                   	if(isCommited)
    					_unitOfWork.Commit();
                }
                catch (DbEntityValidationException exception)
        	    {
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
        	    }
        	    catch (DbUpdateException exception)
        	    {
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
                }
                return result;
            }
    
            public MethodResult Remove(string idUnit, bool isCommited,bool isRemoveChild)
            {
                MethodResult result = MethodResult.Succeed;
    
                try
                {
    				if(isCommited)
    						_unitOfWork.BeginTransaction();
    
    
                    MATHANG entity = Find(idUnit);
    
                    if (entity == null)
                    {
                        ThrowException("Dữ liệu 'MATHANG' này không tồn tại trong hệ thống.");
                    }
    				if(isRemoveChild)
    				{
    				List<HOADONHAPKHOCHITIET> lstHOADONHAPKHOCHITIETs = _HOADONHAPKHOCHITIETRepository.Clone(entity.HOADONHAPKHOCHITIETs);
	 foreach( var obj in lstHOADONHAPKHOCHITIETs ) 
{
HOADONHAPKHOCHITIET objHOADONHAPKHOCHITIET = _HOADONHAPKHOCHITIETRepository.Clone(obj);
 if (objHOADONHAPKHOCHITIET != null)
{
 _HOADONHAPKHOCHITIETRepository.Delete(objHOADONHAPKHOCHITIET);
}
}

List<HOADONNHAPXUATCHITIET> lstHOADONNHAPXUATCHITIETs = _HOADONNHAPXUATCHITIETRepository.Clone(entity.HOADONNHAPXUATCHITIETs);
	 foreach( var obj in lstHOADONNHAPXUATCHITIETs ) 
{
HOADONNHAPXUATCHITIET objHOADONNHAPXUATCHITIET = _HOADONNHAPXUATCHITIETRepository.Clone(obj);
 if (objHOADONNHAPXUATCHITIET != null)
{
 _HOADONNHAPXUATCHITIETRepository.Delete(objHOADONNHAPXUATCHITIET);
}
}

List<HOADONXUATKHOCHITIET> lstHOADONXUATKHOCHITIETs = _HOADONXUATKHOCHITIETRepository.Clone(entity.HOADONXUATKHOCHITIETs);
	 foreach( var obj in lstHOADONXUATKHOCHITIETs ) 
{
HOADONXUATKHOCHITIET objHOADONXUATKHOCHITIET = _HOADONXUATKHOCHITIETRepository.Clone(obj);
 if (objHOADONXUATKHOCHITIET != null)
{
 _HOADONXUATKHOCHITIETRepository.Delete(objHOADONXUATKHOCHITIET);
}
}

List<KHOMATHANG> lstKHOMATHANGs = _KHOMATHANGRepository.Clone(entity.KHOMATHANGs);
	 foreach( var obj in lstKHOMATHANGs ) 
{
KHOMATHANG objKHOMATHANG = _KHOMATHANGRepository.Clone(obj);
 if (objKHOMATHANG != null)
{
 _KHOMATHANGRepository.Delete(objKHOMATHANG);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs);
	 foreach( var obj in lstMATHANGKHUYENMAIs ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.Clone(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Delete(objMATHANGKHUYENMAI);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs1 = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs1);
	 foreach( var obj in lstMATHANGKHUYENMAIs1 ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.Clone(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Delete(objMATHANGKHUYENMAI);
}
}


    
    				    if (SaveChanges() <= 0)
    					{
    						ThrowException("Không thể xóa dữ liệu con 'MATHANG'.");
    					}
    				}
    
                    _MATHANGRepository.Delete(Clone(entity));
    
                    if (SaveChanges() <= 0)
                    {
                        ThrowException("Không thể xóa dữ liệu 'MATHANG'.");
                    }
    
    				if(isCommited)
    						_unitOfWork.Commit();
                }
                catch (DbEntityValidationException exception)
        	    {
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
        	    }
        	    catch (DbUpdateException exception)
        	    {
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
                }
                return result;
            }
    
    		public MethodResult Remove(MATHANG model, bool isCommited,bool isRemoveChild)
            {
                MethodResult result = MethodResult.Succeed;
    
                try
                {
                    if(isCommited)
    						_unitOfWork.BeginTransaction();
    
    
                    MATHANG entity = Find(model.IDUnit);
    
                    if (entity == null)
                    {
                        ThrowException("Dữ liệu 'MATHANG' này không tồn tại trong hệ thống.");
                    }
    
    				if(isRemoveChild)
    				{
    				List<HOADONHAPKHOCHITIET> lstHOADONHAPKHOCHITIETs = _HOADONHAPKHOCHITIETRepository.Clone(entity.HOADONHAPKHOCHITIETs);
	 foreach( var obj in lstHOADONHAPKHOCHITIETs ) 
{
HOADONHAPKHOCHITIET objHOADONHAPKHOCHITIET = _HOADONHAPKHOCHITIETRepository.Clone(obj);
 if (objHOADONHAPKHOCHITIET != null)
{
 _HOADONHAPKHOCHITIETRepository.Delete(objHOADONHAPKHOCHITIET);
}
}

List<HOADONNHAPXUATCHITIET> lstHOADONNHAPXUATCHITIETs = _HOADONNHAPXUATCHITIETRepository.Clone(entity.HOADONNHAPXUATCHITIETs);
	 foreach( var obj in lstHOADONNHAPXUATCHITIETs ) 
{
HOADONNHAPXUATCHITIET objHOADONNHAPXUATCHITIET = _HOADONNHAPXUATCHITIETRepository.Clone(obj);
 if (objHOADONNHAPXUATCHITIET != null)
{
 _HOADONNHAPXUATCHITIETRepository.Delete(objHOADONNHAPXUATCHITIET);
}
}

List<HOADONXUATKHOCHITIET> lstHOADONXUATKHOCHITIETs = _HOADONXUATKHOCHITIETRepository.Clone(entity.HOADONXUATKHOCHITIETs);
	 foreach( var obj in lstHOADONXUATKHOCHITIETs ) 
{
HOADONXUATKHOCHITIET objHOADONXUATKHOCHITIET = _HOADONXUATKHOCHITIETRepository.Clone(obj);
 if (objHOADONXUATKHOCHITIET != null)
{
 _HOADONXUATKHOCHITIETRepository.Delete(objHOADONXUATKHOCHITIET);
}
}

List<KHOMATHANG> lstKHOMATHANGs = _KHOMATHANGRepository.Clone(entity.KHOMATHANGs);
	 foreach( var obj in lstKHOMATHANGs ) 
{
KHOMATHANG objKHOMATHANG = _KHOMATHANGRepository.Clone(obj);
 if (objKHOMATHANG != null)
{
 _KHOMATHANGRepository.Delete(objKHOMATHANG);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs);
	 foreach( var obj in lstMATHANGKHUYENMAIs ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.Clone(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Delete(objMATHANGKHUYENMAI);
}
}

List<MATHANGKHUYENMAI> lstMATHANGKHUYENMAIs1 = _MATHANGKHUYENMAIRepository.Clone(entity.MATHANGKHUYENMAIs1);
	 foreach( var obj in lstMATHANGKHUYENMAIs1 ) 
{
MATHANGKHUYENMAI objMATHANGKHUYENMAI = _MATHANGKHUYENMAIRepository.Clone(obj);
 if (objMATHANGKHUYENMAI != null)
{
 _MATHANGKHUYENMAIRepository.Delete(objMATHANGKHUYENMAI);
}
}


    
    					if (SaveChanges() <= 0)
    					{
    						ThrowException("Không thể xóa dữ liệu con 'MATHANG'.");
    					}
    				}
                    _MATHANGRepository.Delete(Clone(entity));
    
                    if (SaveChanges() <= 0)
                    {
                        ThrowException("Không thể xóa dữ liệu 'MATHANG'.");
                    }
    
                   	if(isCommited)
    					_unitOfWork.Commit();
                }
                catch (DbEntityValidationException exception)
        	    {
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
        	    }
        	    catch (DbUpdateException exception)
        	    {
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
                }
                return result;
            }
    }
}
