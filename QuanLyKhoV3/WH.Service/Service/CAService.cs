//------------------------------------------------------------------------------
// <auto-generated>
// Service Generated By Nick Nguyen
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.UnitOfWork;
using Service.Pattern;
using WH.Entity;
using WH.Model;
using WH.Service.Repository;
using System.Data.Entity.Validation;
using System.Data.Entity.Infrastructure;
using WH.Service.Service;
namespace WH.Service.Service
{
    public partial interface ICAService : IService
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<CA, bool>> predicate);
    
    	CA CreateNew();
        List<CA> FindAll();
    	List<CA> Search(string textSearch);
    	List<CA> Search(Expression<Func<CA, bool>> predicate,string textSearch);
        List<CA> Search(Expression<Func<CA, bool>> predicate);
    	
    	CA Find(string idUnit);
    	CA Find(Expression<Func<CA, bool>> predicate);
    
    	//CA CloneNew(CA objCA);
    	//CA CloneUpdate(CA objCA);
    	CA Clone(CA objCA);
    	List< CA> Clone(IList<CA> listCAs);
    
        MethodResult Add(CA model, bool isCommited = false,bool isAddChild = false);
        MethodResult Modify(CA model, bool isCommited= false,bool isModifyChild = false);
    	MethodResult Remove(CA model, bool isCommited = false,bool isRemoveChild = false);
        MethodResult Remove(string idUnit, bool isCommited = false,bool isRemoveChild = false);
    }
    
    public partial class CAService : global::Service.Pattern.Service, ICAService
    {
    	protected string userId = SessionModel.CurrentSession?.UserId;
    	protected ICARepository _CARepository;
    		protected IHOADONNHAPKHORepository  _HOADONNHAPKHORepository;
		protected IHOADONXUATKHORepository  _HOADONXUATKHORepository;
	
    
    	public CAService(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
        protected override void InitRepositories()
        {
            _CARepository = new CARepository(this._dataContext, this._unitOfWork);
    			_HOADONNHAPKHORepository = new HOADONNHAPKHORepository(this._dataContext, this._unitOfWork);
			_HOADONXUATKHORepository = new HOADONXUATKHORepository(this._dataContext, this._unitOfWork);
		
        }
    	
    	public bool Exist(string id)
        {
    		return _CARepository.Exist(id);
        }
    
    	public bool Exist(Expression<Func<CA, bool>> predicate)
    	{
    		return _CARepository.Exist(predicate);
    	}
    
        public CA CreateNew()
        {
            return _CARepository.CreateNew();
        }
    
    	public List<CA> FindAll()
    	{
    		return _CARepository.FindAll();
    	}
    
    	public List<CA> Search(string textSearch)
        {
            return _CARepository.Search(textSearch);
        }
    
    	public List<CA> Search(Expression<Func<CA, bool>> predicate,string textSearch)
    	{
    		  return _CARepository.Search(predicate, textSearch);
    	}
    
    		public CA Find(Expression<Func<CA, bool>> predicate)
            {
               return _CARepository.getObject(predicate);
            }
    
            public List<CA> Search(Expression<Func<CA, bool>> predicate)
            {
                return _CARepository.Search(predicate);
            }
    
            //public CA CloneNew(CA objCA)
           // {
           //     return _CARepository.CloneNew(objCA);
           // }
    
    	//	public CA CloneUpdate(CA objCA)
    	//	{
    	//		  return _CARepository.CloneUpdate(objCA);
    	//	}
    
    		public CA Clone(CA objCA)
    		{
    			return _CARepository.Clone(objCA);
    		}
    
            public List<CA> Clone(IList<CA> listCAs)
            {
                return _CARepository.Clone(listCAs);
            }
    
        public CA Find(string idUnit)
        {
    		return _CARepository.getObject(idUnit);
        }
    
    	public MethodResult Add(CA entity, bool isCommited,bool isAddChild)
        {
    		MethodResult result = MethodResult.Succeed;
    		try
    		{
    			if(isCommited)
    				_unitOfWork.BeginTransaction();
    
    			entity.Validate();
    
    			_CARepository.Insert(Clone(entity));
    			if (SaveChanges() <= 0)
    			{
    				ThrowException("Không thể thêm dữ liệu 'CA'.");
    			}
    
    			if(isAddChild)
    			{
    			List<HOADONNHAPKHO> lstHOADONNHAPKHOes = _HOADONNHAPKHORepository.Clone(entity.HOADONNHAPKHOes);
	 foreach( var obj in lstHOADONNHAPKHOes ) 
{
HOADONNHAPKHO objHOADONNHAPKHO = _HOADONNHAPKHORepository.CloneNew(obj);
 if (objHOADONNHAPKHO != null)
{
 _HOADONNHAPKHORepository.Insert(objHOADONNHAPKHO);
}
}

List<HOADONXUATKHO> lstHOADONXUATKHOes = _HOADONXUATKHORepository.Clone(entity.HOADONXUATKHOes);
	 foreach( var obj in lstHOADONXUATKHOes ) 
{
HOADONXUATKHO objHOADONXUATKHO = _HOADONXUATKHORepository.CloneNew(obj);
 if (objHOADONXUATKHO != null)
{
 _HOADONXUATKHORepository.Insert(objHOADONXUATKHO);
}
}


    
    				if (SaveChanges() <= 0)
    				{
    					ThrowException("Không thể thêm dữ liệu con 'CA'.");
    				}
    			}
    
    			if(isCommited)
    					_unitOfWork.Commit();
            }
    		catch (DbEntityValidationException exception)
    		{
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
    		 }
    		catch (DbUpdateException exception)
    		{
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
    		}
            return result;
        }
    
    	public MethodResult Modify(CA entity, bool isCommited,bool isModifyChild)
    	{
                MethodResult result = MethodResult.Succeed;
                try
                {
    
                 if(isCommited)
    				_unitOfWork.BeginTransaction();
    
                    entity.Validate();
    
                    _CARepository.Update(Clone(entity));
    				if (SaveChanges() <= 0)
                    {
                        ThrowException("Không thể sửa dữ liệu 'CA'.");
                    }
    
    				if(isModifyChild)
    				{
    				List<HOADONNHAPKHO> lstHOADONNHAPKHOes = _HOADONNHAPKHORepository.Clone(entity.HOADONNHAPKHOes);
	 foreach( var obj in lstHOADONNHAPKHOes ) 
{
HOADONNHAPKHO objHOADONNHAPKHO = _HOADONNHAPKHORepository.CloneUpdate(obj);
 if (objHOADONNHAPKHO != null)
{
 _HOADONNHAPKHORepository.Update(objHOADONNHAPKHO);
}
}

List<HOADONXUATKHO> lstHOADONXUATKHOes = _HOADONXUATKHORepository.Clone(entity.HOADONXUATKHOes);
	 foreach( var obj in lstHOADONXUATKHOes ) 
{
HOADONXUATKHO objHOADONXUATKHO = _HOADONXUATKHORepository.CloneUpdate(obj);
 if (objHOADONXUATKHO != null)
{
 _HOADONXUATKHORepository.Update(objHOADONXUATKHO);
}
}


    
    					 if (SaveChanges() <= 0)
    					{
    						ThrowException("Không thể sửa dữ liệu con 'CA'.");
    					}
    				}
    
                   	if(isCommited)
    					_unitOfWork.Commit();
                }
                catch (DbEntityValidationException exception)
        	    {
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
        	    }
        	    catch (DbUpdateException exception)
        	    {
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
                }
                return result;
            }
    
            public MethodResult Remove(string idUnit, bool isCommited,bool isRemoveChild)
            {
                MethodResult result = MethodResult.Succeed;
    
                try
                {
    				if(isCommited)
    						_unitOfWork.BeginTransaction();
    
    
                    CA entity = Find(idUnit);
    
                    if (entity == null)
                    {
                        ThrowException("Dữ liệu 'CA' này không tồn tại trong hệ thống.");
                    }
    				if(isRemoveChild)
    				{
    				List<HOADONNHAPKHO> lstHOADONNHAPKHOes = _HOADONNHAPKHORepository.Clone(entity.HOADONNHAPKHOes);
	 foreach( var obj in lstHOADONNHAPKHOes ) 
{
HOADONNHAPKHO objHOADONNHAPKHO = _HOADONNHAPKHORepository.Clone(obj);
 if (objHOADONNHAPKHO != null)
{
 _HOADONNHAPKHORepository.Delete(objHOADONNHAPKHO);
}
}

List<HOADONXUATKHO> lstHOADONXUATKHOes = _HOADONXUATKHORepository.Clone(entity.HOADONXUATKHOes);
	 foreach( var obj in lstHOADONXUATKHOes ) 
{
HOADONXUATKHO objHOADONXUATKHO = _HOADONXUATKHORepository.Clone(obj);
 if (objHOADONXUATKHO != null)
{
 _HOADONXUATKHORepository.Delete(objHOADONXUATKHO);
}
}


    
    				    if (SaveChanges() <= 0)
    					{
    						ThrowException("Không thể xóa dữ liệu con 'CA'.");
    					}
    				}
    
                    _CARepository.Delete(Clone(entity));
    
                    if (SaveChanges() <= 0)
                    {
                        ThrowException("Không thể xóa dữ liệu 'CA'.");
                    }
    
    				if(isCommited)
    						_unitOfWork.Commit();
                }
                catch (DbEntityValidationException exception)
        	    {
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
        	    }
        	    catch (DbUpdateException exception)
        	    {
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
                }
                return result;
            }
    
    		public MethodResult Remove(CA model, bool isCommited,bool isRemoveChild)
            {
                MethodResult result = MethodResult.Succeed;
    
                try
                {
                    if(isCommited)
    						_unitOfWork.BeginTransaction();
    
    
                    CA entity = Find(model.IDUnit);
    
                    if (entity == null)
                    {
                        ThrowException("Dữ liệu 'CA' này không tồn tại trong hệ thống.");
                    }
    
    				if(isRemoveChild)
    				{
    				List<HOADONNHAPKHO> lstHOADONNHAPKHOes = _HOADONNHAPKHORepository.Clone(entity.HOADONNHAPKHOes);
	 foreach( var obj in lstHOADONNHAPKHOes ) 
{
HOADONNHAPKHO objHOADONNHAPKHO = _HOADONNHAPKHORepository.Clone(obj);
 if (objHOADONNHAPKHO != null)
{
 _HOADONNHAPKHORepository.Delete(objHOADONNHAPKHO);
}
}

List<HOADONXUATKHO> lstHOADONXUATKHOes = _HOADONXUATKHORepository.Clone(entity.HOADONXUATKHOes);
	 foreach( var obj in lstHOADONXUATKHOes ) 
{
HOADONXUATKHO objHOADONXUATKHO = _HOADONXUATKHORepository.Clone(obj);
 if (objHOADONXUATKHO != null)
{
 _HOADONXUATKHORepository.Delete(objHOADONXUATKHO);
}
}


    
    					if (SaveChanges() <= 0)
    					{
    						ThrowException("Không thể xóa dữ liệu con 'CA'.");
    					}
    				}
                    _CARepository.Delete(Clone(entity));
    
                    if (SaveChanges() <= 0)
                    {
                        ThrowException("Không thể xóa dữ liệu 'CA'.");
                    }
    
                   	if(isCommited)
    					_unitOfWork.Commit();
                }
                catch (DbEntityValidationException exception)
        	    {
        	        var ex = HandleDbEntityValidationException(exception);
    
        	        if (_unitOfWork != null) _unitOfWork.Rollback();
        	        ErrMsg = ex.Message;
        	        result = MethodResult.Failed;
        	    }
        	    catch (DbUpdateException exception)
        	    {
                    var ex = HandleDbUpdateException(exception);
    
                    if (_unitOfWork != null) _unitOfWork.Rollback();
                    ErrMsg = ex.Message;
                    result = MethodResult.Failed;
                }
                return result;
            }
    }
}
