//------------------------------------------------------------------------------
// <auto-generated>
// Repository Generated
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using Util.Pattern;
using WH.Entity;
using System;

namespace WH.Service.Repository
{
    public partial interface ILOAIMATHANGRepository : IRepositoryAsync<LOAIMATHANG>
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<LOAIMATHANG, bool>> predicate);
    	LOAIMATHANG getObject(string id);
    	LOAIMATHANG getObject(Expression<Func<LOAIMATHANG, bool>> predicate);
    	
    
    	LOAIMATHANG CreateNew();
    	LOAIMATHANG CloneNew(LOAIMATHANG objLOAIMATHANG);
    	LOAIMATHANG CloneUpdate(LOAIMATHANG objLOAIMATHANG);
    	LOAIMATHANG Clone(LOAIMATHANG objLOAIMATHANG);
    
    	List< LOAIMATHANG> Clone(IList<LOAIMATHANG> listLOAIMATHANGs);
    	string GetMaxCode();
    	List<LOAIMATHANG> Search(string textSearch);
    	List<LOAIMATHANG> Search(Expression<Func<LOAIMATHANG, bool>> predicate);
    	List<LOAIMATHANG> Search(Expression<Func<LOAIMATHANG, bool>> predicate,string textSearch);
    }
    
    public partial class LOAIMATHANGRepository : Repository<LOAIMATHANG>, ILOAIMATHANGRepository
    {
    	public string DefaultCode
        {
    		get { return null; }
        }
    
        public LOAIMATHANGRepository(IDataContextAsync context, IUnitOfWorkAsync unitOfWork) : base(context, unitOfWork)
        {
        }
    
        public LOAIMATHANGRepository(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
    	public bool Exist(string id)
        {
    		return QueryableList().Any(p => p.IDUnit == id);
        }
    
    	public bool Exist(Expression<Func<LOAIMATHANG, bool>> predicate)
    	{
    		return Queryable().Any(predicate);
    	}
    
    	public LOAIMATHANG CreateNew()
        {
    		
    		LOAIMATHANG _obj = Create();
    
    				//_obj.CHIETKHAULOAIMATHANGs = null;//List
    		//_obj.CHIETKHAULOAIMATHANGs = new List<CHIETKHAULOAIMATHANG>();//List
    					//_obj.MATHANGs = null;//List
    		//_obj.MATHANGs = new List<MATHANG>();//List
    					_obj.TENLOAIMATHANG = string.Empty;//string
    					_obj.MOTA = string.Empty;//string
    						_obj.NGAYTAO = null;//Nullable<System.DateTime>
    									_obj.NGUOITAO = string.Empty;//string
    						_obj.NGAYCAPNHAT = null;//Nullable<System.DateTime>
    									_obj.NGUOICAPNHAT = string.Empty;//string
    			        return _obj;
        }
    
    	public LOAIMATHANG CloneNew(LOAIMATHANG objLOAIMATHANG)
    	{
    		if(objLOAIMATHANG==null) return null;
    			 LOAIMATHANG objNew = Find(objLOAIMATHANG.MALOAIMATHANG);
    			if(objNew !=null) return null;
    
    		 objNew =  CreateNew();
    		 				objNew.MALOAIMATHANG =  objLOAIMATHANG.MALOAIMATHANG;
    								objNew.TENLOAIMATHANG =  objLOAIMATHANG.TENLOAIMATHANG;
    								objNew.MOTA =  objLOAIMATHANG.MOTA;
    								objNew.STATUS =  objLOAIMATHANG.STATUS;
    								objNew.NGAYTAO =  objLOAIMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objLOAIMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objLOAIMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objLOAIMATHANG.NGUOICAPNHAT;
    						  objNew.isAdd = true;
    		 return objNew;
    	}
    
    	public LOAIMATHANG CloneUpdate(LOAIMATHANG objLOAIMATHANG)
    	{
    		if(objLOAIMATHANG==null) return null;
    		 LOAIMATHANG objNew = Find(objLOAIMATHANG.MALOAIMATHANG);
    		 if(objNew==null) return null;
    		 				objNew.MALOAIMATHANG =  objLOAIMATHANG.MALOAIMATHANG;
    								objNew.TENLOAIMATHANG =  objLOAIMATHANG.TENLOAIMATHANG;
    								objNew.MOTA =  objLOAIMATHANG.MOTA;
    								objNew.STATUS =  objLOAIMATHANG.STATUS;
    								objNew.NGAYTAO =  objLOAIMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objLOAIMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objLOAIMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objLOAIMATHANG.NGUOICAPNHAT;
    						 objNew.isUpdate = true;
    		 return objNew;
    	}
    	public LOAIMATHANG Clone(LOAIMATHANG objLOAIMATHANG)
    	{
    		if(objLOAIMATHANG==null) return null;
    		 LOAIMATHANG objNew = Find(objLOAIMATHANG.MALOAIMATHANG);
    		 if(objNew==null) 
    		 {
    		 objNew =  CreateNew();
    		 				objNew.MALOAIMATHANG =  objLOAIMATHANG.MALOAIMATHANG;
    								objNew.TENLOAIMATHANG =  objLOAIMATHANG.TENLOAIMATHANG;
    								objNew.MOTA =  objLOAIMATHANG.MOTA;
    								objNew.STATUS =  objLOAIMATHANG.STATUS;
    								objNew.NGAYTAO =  objLOAIMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objLOAIMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objLOAIMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objLOAIMATHANG.NGUOICAPNHAT;
    						  objNew.isAdd = true;
    		 }
    		 else
    		 {
    		 				objNew.TENLOAIMATHANG =  objLOAIMATHANG.TENLOAIMATHANG;
    								objNew.MOTA =  objLOAIMATHANG.MOTA;
    								objNew.STATUS =  objLOAIMATHANG.STATUS;
    								objNew.NGAYTAO =  objLOAIMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objLOAIMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objLOAIMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objLOAIMATHANG.NGUOICAPNHAT;
    						 objNew.isUpdate = true;
    		  objNew.isLoaded = true;
    		 }
    		 return objNew;
    	}
    
    	public List< LOAIMATHANG> Clone(IList<LOAIMATHANG> listLOAIMATHANGs)
    	{
    		List< LOAIMATHANG> lst = new List< LOAIMATHANG>();
    		if(listLOAIMATHANGs == null) return lst;
    		foreach(var obj in  listLOAIMATHANGs)
    		{
    			 lst.Add(Clone(obj));
    		}
    		return lst;
    	}
    
    	public LOAIMATHANG getObject(string id)
    	{
    		return QueryableList().FirstOrDefault(p => p.IDUnit == id);
    	}
    
    	public LOAIMATHANG getObject(Expression<Func<LOAIMATHANG, bool>> predicate)
    	{
    		return  Queryable().FirstOrDefault(predicate);
    	}
    
    	 public string GetMaxCode()
         {
    		return QueryableList().Max(s=>s.IDUnit).ToString();
         }
    
    	 public List<LOAIMATHANG> Search(string textSearch)
    	 {
    		List<LOAIMATHANG> listIDUnit = QueryableList().Where(p=>p.IDUnit == textSearch).ToList();
    		if (listIDUnit.Count != 0)
    		{
        		return listIDUnit;
    		}
    		else
    		{
        		listIDUnit = QueryableList().Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
        		return listIDUnit.Count == 0
        		? QueryableList().Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
        		: listIDUnit;
    		}
    	 }
    
    	public List<LOAIMATHANG> Search(Expression<Func<LOAIMATHANG, bool>> predicate)
    	{
    		return  Queryable().Where(predicate).ToList();
    	}
    
    	public List<LOAIMATHANG> Search(Expression<Func<LOAIMATHANG, bool>> predicate,string textSearch)
    	{
    			List<LOAIMATHANG> listIDUnit = Search(predicate).Where(p => p.IDUnit == textSearch).ToList();
                if (listIDUnit.Count != 0)
                {
                    return listIDUnit;
                }
                else
                {
                    listIDUnit = Search(predicate).Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
                    return listIDUnit.Count == 0
                    ? Search(predicate).Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
                    : listIDUnit;
                }
    	}
    }
}
