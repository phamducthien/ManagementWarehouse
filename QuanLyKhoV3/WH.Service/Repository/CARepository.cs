//------------------------------------------------------------------------------
// <auto-generated>
// Repository Generated
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using Util.Pattern;
using WH.Entity;
using System;

namespace WH.Service.Repository
{
    public partial interface ICARepository : IRepositoryAsync<CA>
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<CA, bool>> predicate);
    	CA getObject(string id);
    	CA getObject(Expression<Func<CA, bool>> predicate);
    	
    
    	CA CreateNew();
    	CA CloneNew(CA objCA);
    	CA CloneUpdate(CA objCA);
    	CA Clone(CA objCA);
    
    	List< CA> Clone(IList<CA> listCAs);
    	string GetMaxCode();
    	List<CA> Search(string textSearch);
    	List<CA> Search(Expression<Func<CA, bool>> predicate);
    	List<CA> Search(Expression<Func<CA, bool>> predicate,string textSearch);
    }
    
    public partial class CARepository : Repository<CA>, ICARepository
    {
    	public string DefaultCode
        {
    		get { return null; }
        }
    
        public CARepository(IDataContextAsync context, IUnitOfWorkAsync unitOfWork) : base(context, unitOfWork)
        {
        }
    
        public CARepository(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
    	public bool Exist(string id)
        {
    		return QueryableList().Any(p => p.IDUnit == id);
        }
    
    	public bool Exist(Expression<Func<CA, bool>> predicate)
    	{
    		return Queryable().Any(predicate);
    	}
    
    	public CA CreateNew()
        {
    		
    		CA _obj = Create();
    
    				//_obj.NHANVIEN = null;//object
    		_obj.MANHANVIEN =  null;////Nullable<int>
    									//_obj.HOADONNHAPKHOes = null;//List
    		//_obj.HOADONNHAPKHOes = new List<HOADONNHAPKHO>();//List
    					//_obj.HOADONXUATKHOes = null;//List
    		//_obj.HOADONXUATKHOes = new List<HOADONXUATKHO>();//List
    						_obj.NGAYBATDAU = null;//Nullable<System.DateTime>
    										_obj.NGAYKETTHUC = null;//Nullable<System.DateTime>
    									_obj.GHICHU = string.Empty;//string
    					_obj.BATDAUCA = null;//Nullable<bool>
    									_obj.TRONGCA = null;//Nullable<bool>
    									_obj.KETCA = null;//Nullable<bool>
    							        return _obj;
        }
    
    	public CA CloneNew(CA objCA)
    	{
    		if(objCA==null) return null;
    			 CA objNew = Find(objCA.MACA);
    			if(objNew !=null) return null;
    
    		 objNew =  CreateNew();
    		 				objNew.MACA =  objCA.MACA;
    								objNew.MANHANVIEN =  objCA.MANHANVIEN;
    								objNew.NGAYBATDAU =  objCA.NGAYBATDAU;
    								objNew.NGAYKETTHUC =  objCA.NGAYKETTHUC;
    								objNew.TIENBATDAU =  objCA.TIENBATDAU;
    								objNew.TIENBAN =  objCA.TIENBAN;
    								objNew.TIENKHACHTRA =  objCA.TIENKHACHTRA;
    								objNew.TIENTHOILAI =  objCA.TIENTHOILAI;
    								objNew.TIENKHUYENMAI =  objCA.TIENKHUYENMAI;
    								objNew.TONGTIENKETCA =  objCA.TONGTIENKETCA;
    								objNew.SOLUONGHOADON =  objCA.SOLUONGHOADON;
    								objNew.GHICHU =  objCA.GHICHU;
    								objNew.BATDAUCA =  objCA.BATDAUCA;
    								objNew.TRONGCA =  objCA.TRONGCA;
    								objNew.KETCA =  objCA.KETCA;
    						  objNew.isAdd = true;
    		 return objNew;
    	}
    
    	public CA CloneUpdate(CA objCA)
    	{
    		if(objCA==null) return null;
    		 CA objNew = Find(objCA.MACA);
    		 if(objNew==null) return null;
    		 				objNew.MACA =  objCA.MACA;
    								objNew.MANHANVIEN =  objCA.MANHANVIEN;
    								objNew.NGAYBATDAU =  objCA.NGAYBATDAU;
    								objNew.NGAYKETTHUC =  objCA.NGAYKETTHUC;
    								objNew.TIENBATDAU =  objCA.TIENBATDAU;
    								objNew.TIENBAN =  objCA.TIENBAN;
    								objNew.TIENKHACHTRA =  objCA.TIENKHACHTRA;
    								objNew.TIENTHOILAI =  objCA.TIENTHOILAI;
    								objNew.TIENKHUYENMAI =  objCA.TIENKHUYENMAI;
    								objNew.TONGTIENKETCA =  objCA.TONGTIENKETCA;
    								objNew.SOLUONGHOADON =  objCA.SOLUONGHOADON;
    								objNew.GHICHU =  objCA.GHICHU;
    								objNew.BATDAUCA =  objCA.BATDAUCA;
    								objNew.TRONGCA =  objCA.TRONGCA;
    								objNew.KETCA =  objCA.KETCA;
    						 objNew.isUpdate = true;
    		 return objNew;
    	}
    	public CA Clone(CA objCA)
    	{
    		if(objCA==null) return null;
    		 CA objNew = Find(objCA.MACA);
    		 if(objNew==null) 
    		 {
    		 objNew =  CreateNew();
    		 				objNew.MACA =  objCA.MACA;
    								objNew.MANHANVIEN =  objCA.MANHANVIEN;
    								objNew.NGAYBATDAU =  objCA.NGAYBATDAU;
    								objNew.NGAYKETTHUC =  objCA.NGAYKETTHUC;
    								objNew.TIENBATDAU =  objCA.TIENBATDAU;
    								objNew.TIENBAN =  objCA.TIENBAN;
    								objNew.TIENKHACHTRA =  objCA.TIENKHACHTRA;
    								objNew.TIENTHOILAI =  objCA.TIENTHOILAI;
    								objNew.TIENKHUYENMAI =  objCA.TIENKHUYENMAI;
    								objNew.TONGTIENKETCA =  objCA.TONGTIENKETCA;
    								objNew.SOLUONGHOADON =  objCA.SOLUONGHOADON;
    								objNew.GHICHU =  objCA.GHICHU;
    								objNew.BATDAUCA =  objCA.BATDAUCA;
    								objNew.TRONGCA =  objCA.TRONGCA;
    								objNew.KETCA =  objCA.KETCA;
    						  objNew.isAdd = true;
    		 }
    		 else
    		 {
    		 				objNew.MANHANVIEN =  objCA.MANHANVIEN;
    								objNew.NGAYBATDAU =  objCA.NGAYBATDAU;
    								objNew.NGAYKETTHUC =  objCA.NGAYKETTHUC;
    								objNew.TIENBATDAU =  objCA.TIENBATDAU;
    								objNew.TIENBAN =  objCA.TIENBAN;
    								objNew.TIENKHACHTRA =  objCA.TIENKHACHTRA;
    								objNew.TIENTHOILAI =  objCA.TIENTHOILAI;
    								objNew.TIENKHUYENMAI =  objCA.TIENKHUYENMAI;
    								objNew.TONGTIENKETCA =  objCA.TONGTIENKETCA;
    								objNew.SOLUONGHOADON =  objCA.SOLUONGHOADON;
    								objNew.GHICHU =  objCA.GHICHU;
    								objNew.BATDAUCA =  objCA.BATDAUCA;
    								objNew.TRONGCA =  objCA.TRONGCA;
    								objNew.KETCA =  objCA.KETCA;
    						 objNew.isUpdate = true;
    		  objNew.isLoaded = true;
    		 }
    		 return objNew;
    	}
    
    	public List< CA> Clone(IList<CA> listCAs)
    	{
    		List< CA> lst = new List< CA>();
    		if(listCAs == null) return lst;
    		foreach(var obj in  listCAs)
    		{
    			 lst.Add(Clone(obj));
    		}
    		return lst;
    	}
    
    	public CA getObject(string id)
    	{
    		return QueryableList().FirstOrDefault(p => p.IDUnit == id);
    	}
    
    	public CA getObject(Expression<Func<CA, bool>> predicate)
    	{
    		return  Queryable().FirstOrDefault(predicate);
    	}
    
    	 public string GetMaxCode()
         {
    		return QueryableList().Max(s=>s.IDUnit).ToString();
         }
    
    	 public List<CA> Search(string textSearch)
    	 {
    		List<CA> listIDUnit = QueryableList().Where(p=>p.IDUnit == textSearch).ToList();
    		if (listIDUnit.Count != 0)
    		{
        		return listIDUnit;
    		}
    		else
    		{
        		listIDUnit = QueryableList().Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
        		return listIDUnit.Count == 0
        		? QueryableList().Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
        		: listIDUnit;
    		}
    	 }
    
    	public List<CA> Search(Expression<Func<CA, bool>> predicate)
    	{
    		return  Queryable().Where(predicate).ToList();
    	}
    
    	public List<CA> Search(Expression<Func<CA, bool>> predicate,string textSearch)
    	{
    			List<CA> listIDUnit = Search(predicate).Where(p => p.IDUnit == textSearch).ToList();
                if (listIDUnit.Count != 0)
                {
                    return listIDUnit;
                }
                else
                {
                    listIDUnit = Search(predicate).Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
                    return listIDUnit.Count == 0
                    ? Search(predicate).Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
                    : listIDUnit;
                }
    	}
    }
}
