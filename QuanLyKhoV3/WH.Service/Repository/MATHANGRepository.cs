//------------------------------------------------------------------------------
// <auto-generated>
// Repository Generated
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using Util.Pattern;
using WH.Entity;
using System;

namespace WH.Service.Repository
{
    public partial interface IMATHANGRepository : IRepositoryAsync<MATHANG>
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<MATHANG, bool>> predicate);
    	MATHANG getObject(string id);
    	MATHANG getObject(Expression<Func<MATHANG, bool>> predicate);
    	
    
    	MATHANG CreateNew();
    	MATHANG CloneNew(MATHANG objMATHANG);
    	MATHANG CloneUpdate(MATHANG objMATHANG);
    	MATHANG Clone(MATHANG objMATHANG);
    
    	List< MATHANG> Clone(IList<MATHANG> listMATHANGs);
    	string GetMaxCode();
    	List<MATHANG> Search(string textSearch);
    	List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate);
    	List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate,string textSearch);
    }
    
    public partial class MATHANGRepository : Repository<MATHANG>, IMATHANGRepository
    {
    	public string DefaultCode
        {
    		get { return null; }
        }
    
        public MATHANGRepository(IDataContextAsync context, IUnitOfWorkAsync unitOfWork) : base(context, unitOfWork)
        {
        }
    
        public MATHANGRepository(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
    	public bool Exist(string id)
        {
    		return QueryableList().Any(p => p.IDUnit == id);
        }
    
    	public bool Exist(Expression<Func<MATHANG, bool>> predicate)
    	{
    		return Queryable().Any(predicate);
    	}
    
    	public MATHANG CreateNew()
        {
    		
    		MATHANG _obj = Create();
    
    				//_obj.DONVI = null;//object
    		_obj.MADONVISI =  null;////Nullable<int>
    									//_obj.DONVI = null;//object
    		_obj.MADONVILE =  null;////Nullable<int>
    									//_obj.HOADONHAPKHOCHITIETs = null;//List
    		//_obj.HOADONHAPKHOCHITIETs = new List<HOADONHAPKHOCHITIET>();//List
    					//_obj.HOADONNHAPXUATCHITIETs = null;//List
    		//_obj.HOADONNHAPXUATCHITIETs = new List<HOADONNHAPXUATCHITIET>();//List
    					//_obj.HOADONXUATKHOCHITIETs = null;//List
    		//_obj.HOADONXUATKHOCHITIETs = new List<HOADONXUATKHOCHITIET>();//List
    					//_obj.KHOMATHANGs = null;//List
    		//_obj.KHOMATHANGs = new List<KHOMATHANG>();//List
    					//_obj.LOAIMATHANG = null;//object
    		_obj.MALOAIMATHANG =  null;////Nullable<int>
    									//_obj.MATHANGKHUYENMAIs = null;//List
    		//_obj.MATHANGKHUYENMAIs = new List<MATHANGKHUYENMAI>();//List
    					//_obj.MATHANGKHUYENMAIs1 = null;//List
    		//_obj.MATHANGKHUYENMAIs1 = new List<MATHANGKHUYENMAI>();//List
    					_obj.MABARCODE = string.Empty;//string
    					_obj.MACODE = string.Empty;//string
    					_obj.TENMATHANG = string.Empty;//string
    					_obj.XUATXU = string.Empty;//string
    					_obj.ISKHUYENMAI = null;//Nullable<bool>
    									_obj.ISUSE = null;//Nullable<bool>
    									_obj.ISDELETE = null;//Nullable<bool>
    									_obj.ISTHEODOI = null;//Nullable<bool>
    										_obj.NGAYTAO = null;//Nullable<System.DateTime>
    									_obj.NGUOITAO = string.Empty;//string
    						_obj.NGAYCAPNHAT = null;//Nullable<System.DateTime>
    									_obj.NGUOICAPNHAT = string.Empty;//string
    					_obj.GHICHU = string.Empty;//string
    			        return _obj;
        }
    
    	public MATHANG CloneNew(MATHANG objMATHANG)
    	{
    		if(objMATHANG==null) return null;
    			 MATHANG objNew = Find(objMATHANG.MAMATHANG);
    			if(objNew !=null) return null;
    
    		 objNew =  CreateNew();
    		 				objNew.MAMATHANG =  objMATHANG.MAMATHANG;
    								objNew.MABARCODE =  objMATHANG.MABARCODE;
    								objNew.MACODE =  objMATHANG.MACODE;
    								objNew.TENMATHANG =  objMATHANG.TENMATHANG;
    								objNew.HINHANH =  objMATHANG.HINHANH;
    								objNew.MADONVISI =  objMATHANG.MADONVISI;
    								objNew.MADONVILE =  objMATHANG.MADONVILE;
    								objNew.SOLUONGQUYDOI =  objMATHANG.SOLUONGQUYDOI;
    								objNew.VAT =  objMATHANG.VAT;
    								objNew.CHIETKHAU =  objMATHANG.CHIETKHAU;
    								objNew.XUATXU =  objMATHANG.XUATXU;
    								objNew.GIANHAP =  objMATHANG.GIANHAP;
    								objNew.GIALE =  objMATHANG.GIALE;
    								objNew.GIAQUYDINH =  objMATHANG.GIAQUYDINH;
    								objNew.GIACHIATHANG =  objMATHANG.GIACHIATHANG;
    								objNew.GIAKHUYENMAI =  objMATHANG.GIAKHUYENMAI;
    								objNew.NGUONGNHAP =  objMATHANG.NGUONGNHAP;
    								objNew.NGUONGXUAT =  objMATHANG.NGUONGXUAT;
    								objNew.ISKHUYENMAI =  objMATHANG.ISKHUYENMAI;
    								objNew.ISUSE =  objMATHANG.ISUSE;
    								objNew.ISDELETE =  objMATHANG.ISDELETE;
    								objNew.ISTHEODOI =  objMATHANG.ISTHEODOI;
    								objNew.NGAYTAO =  objMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objMATHANG.NGUOICAPNHAT;
    								objNew.MALOAIMATHANG =  objMATHANG.MALOAIMATHANG;
    								objNew.GHICHU =  objMATHANG.GHICHU;
    						  objNew.isAdd = true;
    		 return objNew;
    	}
    
    	public MATHANG CloneUpdate(MATHANG objMATHANG)
    	{
    		if(objMATHANG==null) return null;
    		 MATHANG objNew = Find(objMATHANG.MAMATHANG);
    		 if(objNew==null) return null;
    		 				objNew.MAMATHANG =  objMATHANG.MAMATHANG;
    								objNew.MABARCODE =  objMATHANG.MABARCODE;
    								objNew.MACODE =  objMATHANG.MACODE;
    								objNew.TENMATHANG =  objMATHANG.TENMATHANG;
    								objNew.HINHANH =  objMATHANG.HINHANH;
    								objNew.MADONVISI =  objMATHANG.MADONVISI;
    								objNew.MADONVILE =  objMATHANG.MADONVILE;
    								objNew.SOLUONGQUYDOI =  objMATHANG.SOLUONGQUYDOI;
    								objNew.VAT =  objMATHANG.VAT;
    								objNew.CHIETKHAU =  objMATHANG.CHIETKHAU;
    								objNew.XUATXU =  objMATHANG.XUATXU;
    								objNew.GIANHAP =  objMATHANG.GIANHAP;
    								objNew.GIALE =  objMATHANG.GIALE;
    								objNew.GIAQUYDINH =  objMATHANG.GIAQUYDINH;
    								objNew.GIACHIATHANG =  objMATHANG.GIACHIATHANG;
    								objNew.GIAKHUYENMAI =  objMATHANG.GIAKHUYENMAI;
    								objNew.NGUONGNHAP =  objMATHANG.NGUONGNHAP;
    								objNew.NGUONGXUAT =  objMATHANG.NGUONGXUAT;
    								objNew.ISKHUYENMAI =  objMATHANG.ISKHUYENMAI;
    								objNew.ISUSE =  objMATHANG.ISUSE;
    								objNew.ISDELETE =  objMATHANG.ISDELETE;
    								objNew.ISTHEODOI =  objMATHANG.ISTHEODOI;
    								objNew.NGAYTAO =  objMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objMATHANG.NGUOICAPNHAT;
    								objNew.MALOAIMATHANG =  objMATHANG.MALOAIMATHANG;
    								objNew.GHICHU =  objMATHANG.GHICHU;
    						 objNew.isUpdate = true;
    		 return objNew;
    	}
    	public MATHANG Clone(MATHANG objMATHANG)
    	{
    		if(objMATHANG==null) return null;
    		 MATHANG objNew = Find(objMATHANG.MAMATHANG);
    		 if(objNew==null) 
    		 {
    		 objNew =  CreateNew();
    		 				objNew.MAMATHANG =  objMATHANG.MAMATHANG;
    								objNew.MABARCODE =  objMATHANG.MABARCODE;
    								objNew.MACODE =  objMATHANG.MACODE;
    								objNew.TENMATHANG =  objMATHANG.TENMATHANG;
    								objNew.HINHANH =  objMATHANG.HINHANH;
    								objNew.MADONVISI =  objMATHANG.MADONVISI;
    								objNew.MADONVILE =  objMATHANG.MADONVILE;
    								objNew.SOLUONGQUYDOI =  objMATHANG.SOLUONGQUYDOI;
    								objNew.VAT =  objMATHANG.VAT;
    								objNew.CHIETKHAU =  objMATHANG.CHIETKHAU;
    								objNew.XUATXU =  objMATHANG.XUATXU;
    								objNew.GIANHAP =  objMATHANG.GIANHAP;
    								objNew.GIALE =  objMATHANG.GIALE;
    								objNew.GIAQUYDINH =  objMATHANG.GIAQUYDINH;
    								objNew.GIACHIATHANG =  objMATHANG.GIACHIATHANG;
    								objNew.GIAKHUYENMAI =  objMATHANG.GIAKHUYENMAI;
    								objNew.NGUONGNHAP =  objMATHANG.NGUONGNHAP;
    								objNew.NGUONGXUAT =  objMATHANG.NGUONGXUAT;
    								objNew.ISKHUYENMAI =  objMATHANG.ISKHUYENMAI;
    								objNew.ISUSE =  objMATHANG.ISUSE;
    								objNew.ISDELETE =  objMATHANG.ISDELETE;
    								objNew.ISTHEODOI =  objMATHANG.ISTHEODOI;
    								objNew.NGAYTAO =  objMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objMATHANG.NGUOICAPNHAT;
    								objNew.MALOAIMATHANG =  objMATHANG.MALOAIMATHANG;
    								objNew.GHICHU =  objMATHANG.GHICHU;
    						  objNew.isAdd = true;
    		 }
    		 else
    		 {
    		 				objNew.MABARCODE =  objMATHANG.MABARCODE;
    								objNew.MACODE =  objMATHANG.MACODE;
    								objNew.TENMATHANG =  objMATHANG.TENMATHANG;
    								objNew.HINHANH =  objMATHANG.HINHANH;
    								objNew.MADONVISI =  objMATHANG.MADONVISI;
    								objNew.MADONVILE =  objMATHANG.MADONVILE;
    								objNew.SOLUONGQUYDOI =  objMATHANG.SOLUONGQUYDOI;
    								objNew.VAT =  objMATHANG.VAT;
    								objNew.CHIETKHAU =  objMATHANG.CHIETKHAU;
    								objNew.XUATXU =  objMATHANG.XUATXU;
    								objNew.GIANHAP =  objMATHANG.GIANHAP;
    								objNew.GIALE =  objMATHANG.GIALE;
    								objNew.GIAQUYDINH =  objMATHANG.GIAQUYDINH;
    								objNew.GIACHIATHANG =  objMATHANG.GIACHIATHANG;
    								objNew.GIAKHUYENMAI =  objMATHANG.GIAKHUYENMAI;
    								objNew.NGUONGNHAP =  objMATHANG.NGUONGNHAP;
    								objNew.NGUONGXUAT =  objMATHANG.NGUONGXUAT;
    								objNew.ISKHUYENMAI =  objMATHANG.ISKHUYENMAI;
    								objNew.ISUSE =  objMATHANG.ISUSE;
    								objNew.ISDELETE =  objMATHANG.ISDELETE;
    								objNew.ISTHEODOI =  objMATHANG.ISTHEODOI;
    								objNew.NGAYTAO =  objMATHANG.NGAYTAO;
    								objNew.NGUOITAO =  objMATHANG.NGUOITAO;
    								objNew.NGAYCAPNHAT =  objMATHANG.NGAYCAPNHAT;
    								objNew.NGUOICAPNHAT =  objMATHANG.NGUOICAPNHAT;
    								objNew.MALOAIMATHANG =  objMATHANG.MALOAIMATHANG;
    								objNew.GHICHU =  objMATHANG.GHICHU;
    						 objNew.isUpdate = true;
    		  objNew.isLoaded = true;
    		 }
    		 return objNew;
    	}
    
    	public List< MATHANG> Clone(IList<MATHANG> listMATHANGs)
    	{
    		List< MATHANG> lst = new List< MATHANG>();
    		if(listMATHANGs == null) return lst;
    		foreach(var obj in  listMATHANGs)
    		{
    			 lst.Add(Clone(obj));
    		}
    		return lst;
    	}
    
    	public MATHANG getObject(string id)
    	{
    		return QueryableList().FirstOrDefault(p => p.IDUnit == id);
    	}
    
    	public MATHANG getObject(Expression<Func<MATHANG, bool>> predicate)
    	{
    		return  Queryable().FirstOrDefault(predicate);
    	}
    
    	 public string GetMaxCode()
         {
    		return QueryableList().Max(s=>s.IDUnit).ToString();
         }
    
    	 public List<MATHANG> Search(string textSearch)
    	 {
    		List<MATHANG> listIDUnit = QueryableList().Where(p=>p.IDUnit == textSearch).ToList();
    		if (listIDUnit.Count != 0)
    		{
        		return listIDUnit;
    		}
    		else
    		{
        		listIDUnit = QueryableList().Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
        		return listIDUnit.Count == 0
        		? QueryableList().Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
        		: listIDUnit;
    		}
    	 }
    
    	public List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate)
    	{
    		return  Queryable().Where(predicate).ToList();
    	}
    
    	public List<MATHANG> Search(Expression<Func<MATHANG, bool>> predicate,string textSearch)
    	{
    			List<MATHANG> listIDUnit = Search(predicate).Where(p => p.IDUnit == textSearch).ToList();
                if (listIDUnit.Count != 0)
                {
                    return listIDUnit;
                }
                else
                {
                    listIDUnit = Search(predicate).Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
                    return listIDUnit.Count == 0
                    ? Search(predicate).Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
                    : listIDUnit;
                }
    	}
    }
}
