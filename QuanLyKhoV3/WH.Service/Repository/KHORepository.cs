//------------------------------------------------------------------------------
// <auto-generated>
// Repository Generated
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using Util.Pattern;
using WH.Entity;
using System;

namespace WH.Service.Repository
{
    public partial interface IKHORepository : IRepositoryAsync<KHO>
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<KHO, bool>> predicate);
    	KHO getObject(string id);
    	KHO getObject(Expression<Func<KHO, bool>> predicate);
    	
    
    	KHO CreateNew();
    	KHO CloneNew(KHO objKHO);
    	KHO CloneUpdate(KHO objKHO);
    	KHO Clone(KHO objKHO);
    
    	List< KHO> Clone(IList<KHO> listKHOs);
    	string GetMaxCode();
    	List<KHO> Search(string textSearch);
    	List<KHO> Search(Expression<Func<KHO, bool>> predicate);
    	List<KHO> Search(Expression<Func<KHO, bool>> predicate,string textSearch);
    }
    
    public partial class KHORepository : Repository<KHO>, IKHORepository
    {
    	public string DefaultCode
        {
    		get { return null; }
        }
    
        public KHORepository(IDataContextAsync context, IUnitOfWorkAsync unitOfWork) : base(context, unitOfWork)
        {
        }
    
        public KHORepository(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
    	public bool Exist(string id)
        {
    		return QueryableList().Any(p => p.IDUnit == id);
        }
    
    	public bool Exist(Expression<Func<KHO, bool>> predicate)
    	{
    		return Queryable().Any(predicate);
    	}
    
    	public KHO CreateNew()
        {
    		
    		KHO _obj = Create();
    
    				//_obj.HOADONHAPKHOCHITIETs = null;//List
    		//_obj.HOADONHAPKHOCHITIETs = new List<HOADONHAPKHOCHITIET>();//List
    					//_obj.HOADONNHAPXUATCHITIETs = null;//List
    		//_obj.HOADONNHAPXUATCHITIETs = new List<HOADONNHAPXUATCHITIET>();//List
    					//_obj.HOADONXUATKHOCHITIETs = null;//List
    		//_obj.HOADONXUATKHOCHITIETs = new List<HOADONXUATKHOCHITIET>();//List
    					//_obj.KHOMATHANGs = null;//List
    		//_obj.KHOMATHANGs = new List<KHOMATHANG>();//List
    			            //Primary Key
    			_obj.MAKHO =  Guid.NewGuid();//System.Guid
    						
    									_obj.MACODE = string.Empty;//string
    					_obj.TENKHO = string.Empty;//string
    					_obj.DIACHI = string.Empty;//string
    					_obj.ISUSE = null;//Nullable<bool>
    									_obj.KHOMACDINH = null;//Nullable<bool>
    									_obj.GHICHU = string.Empty;//string
    			        return _obj;
        }
    
    	public KHO CloneNew(KHO objKHO)
    	{
    		if(objKHO==null) return null;
    			 KHO objNew = Find(objKHO.MAKHO);
    			if(objNew !=null) return null;
    
    		 objNew =  CreateNew();
    		 				objNew.MAKHO =  objKHO.MAKHO;
    								objNew.MACODE =  objKHO.MACODE;
    								objNew.TENKHO =  objKHO.TENKHO;
    								objNew.DIACHI =  objKHO.DIACHI;
    								objNew.ISUSE =  objKHO.ISUSE;
    								objNew.KHOMACDINH =  objKHO.KHOMACDINH;
    								objNew.GHICHU =  objKHO.GHICHU;
    						  objNew.isAdd = true;
    		 return objNew;
    	}
    
    	public KHO CloneUpdate(KHO objKHO)
    	{
    		if(objKHO==null) return null;
    		 KHO objNew = Find(objKHO.MAKHO);
    		 if(objNew==null) return null;
    		 				objNew.MAKHO =  objKHO.MAKHO;
    								objNew.MACODE =  objKHO.MACODE;
    								objNew.TENKHO =  objKHO.TENKHO;
    								objNew.DIACHI =  objKHO.DIACHI;
    								objNew.ISUSE =  objKHO.ISUSE;
    								objNew.KHOMACDINH =  objKHO.KHOMACDINH;
    								objNew.GHICHU =  objKHO.GHICHU;
    						 objNew.isUpdate = true;
    		 return objNew;
    	}
    	public KHO Clone(KHO objKHO)
    	{
    		if(objKHO==null) return null;
    		 KHO objNew = Find(objKHO.MAKHO);
    		 if(objNew==null) 
    		 {
    		 objNew =  CreateNew();
    		 				objNew.MAKHO =  objKHO.MAKHO;
    								objNew.MACODE =  objKHO.MACODE;
    								objNew.TENKHO =  objKHO.TENKHO;
    								objNew.DIACHI =  objKHO.DIACHI;
    								objNew.ISUSE =  objKHO.ISUSE;
    								objNew.KHOMACDINH =  objKHO.KHOMACDINH;
    								objNew.GHICHU =  objKHO.GHICHU;
    						  objNew.isAdd = true;
    		 }
    		 else
    		 {
    		 				objNew.MACODE =  objKHO.MACODE;
    								objNew.TENKHO =  objKHO.TENKHO;
    								objNew.DIACHI =  objKHO.DIACHI;
    								objNew.ISUSE =  objKHO.ISUSE;
    								objNew.KHOMACDINH =  objKHO.KHOMACDINH;
    								objNew.GHICHU =  objKHO.GHICHU;
    						 objNew.isUpdate = true;
    		  objNew.isLoaded = true;
    		 }
    		 return objNew;
    	}
    
    	public List< KHO> Clone(IList<KHO> listKHOs)
    	{
    		List< KHO> lst = new List< KHO>();
    		if(listKHOs == null) return lst;
    		foreach(var obj in  listKHOs)
    		{
    			 lst.Add(Clone(obj));
    		}
    		return lst;
    	}
    
    	public KHO getObject(string id)
    	{
    		return QueryableList().FirstOrDefault(p => p.IDUnit == id);
    	}
    
    	public KHO getObject(Expression<Func<KHO, bool>> predicate)
    	{
    		return  Queryable().FirstOrDefault(predicate);
    	}
    
    	 public string GetMaxCode()
         {
    		return QueryableList().Max(s=>s.IDUnit).ToString();
         }
    
    	 public List<KHO> Search(string textSearch)
    	 {
    		List<KHO> listIDUnit = QueryableList().Where(p=>p.IDUnit == textSearch).ToList();
    		if (listIDUnit.Count != 0)
    		{
        		return listIDUnit;
    		}
    		else
    		{
        		listIDUnit = QueryableList().Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
        		return listIDUnit.Count == 0
        		? QueryableList().Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
        		: listIDUnit;
    		}
    	 }
    
    	public List<KHO> Search(Expression<Func<KHO, bool>> predicate)
    	{
    		return  Queryable().Where(predicate).ToList();
    	}
    
    	public List<KHO> Search(Expression<Func<KHO, bool>> predicate,string textSearch)
    	{
    			List<KHO> listIDUnit = Search(predicate).Where(p => p.IDUnit == textSearch).ToList();
                if (listIDUnit.Count != 0)
                {
                    return listIDUnit;
                }
                else
                {
                    listIDUnit = Search(predicate).Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
                    return listIDUnit.Count == 0
                    ? Search(predicate).Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
                    : listIDUnit;
                }
    	}
    }
}
