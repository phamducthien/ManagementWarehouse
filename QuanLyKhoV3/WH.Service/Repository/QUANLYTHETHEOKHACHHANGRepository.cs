//------------------------------------------------------------------------------
// <auto-generated>
// Repository Generated
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using Util.Pattern;
using WH.Entity;
using System;

namespace WH.Service.Repository
{
    public partial interface IQUANLYTHETHEOKHACHHANGRepository : IRepositoryAsync<QUANLYTHETHEOKHACHHANG>
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate);
    	QUANLYTHETHEOKHACHHANG getObject(string id);
    	QUANLYTHETHEOKHACHHANG getObject(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate);
    	
    
    	QUANLYTHETHEOKHACHHANG CreateNew();
    	QUANLYTHETHEOKHACHHANG CloneNew(QUANLYTHETHEOKHACHHANG objQUANLYTHETHEOKHACHHANG);
    	QUANLYTHETHEOKHACHHANG CloneUpdate(QUANLYTHETHEOKHACHHANG objQUANLYTHETHEOKHACHHANG);
    	QUANLYTHETHEOKHACHHANG Clone(QUANLYTHETHEOKHACHHANG objQUANLYTHETHEOKHACHHANG);
    
    	List< QUANLYTHETHEOKHACHHANG> Clone(IList<QUANLYTHETHEOKHACHHANG> listQUANLYTHETHEOKHACHHANGs);
    	string GetMaxCode();
    	List<QUANLYTHETHEOKHACHHANG> Search(string textSearch);
    	List<QUANLYTHETHEOKHACHHANG> Search(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate);
    	List<QUANLYTHETHEOKHACHHANG> Search(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate,string textSearch);
    }
    
    public partial class QUANLYTHETHEOKHACHHANGRepository : Repository<QUANLYTHETHEOKHACHHANG>, IQUANLYTHETHEOKHACHHANGRepository
    {
    	public string DefaultCode
        {
    		get { return null; }
        }
    
        public QUANLYTHETHEOKHACHHANGRepository(IDataContextAsync context, IUnitOfWorkAsync unitOfWork) : base(context, unitOfWork)
        {
        }
    
        public QUANLYTHETHEOKHACHHANGRepository(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
    	public bool Exist(string id)
        {
    		return QueryableList().Any(p => p.IDUnit == id);
        }
    
    	public bool Exist(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate)
    	{
    		return Queryable().Any(predicate);
    	}
    
    	public QUANLYTHETHEOKHACHHANG CreateNew()
        {
    		
    		QUANLYTHETHEOKHACHHANG _obj = Create();
    
    				//_obj.KHACHHANG = null;//object
    		_obj.MAKHACHHANG =  null;////Nullable<System.Guid>
    									//_obj.THONGTINTHE = null;//object
    		_obj.MATHE = null;//string
    										_obj.NGAYCAPTHE = null;//Nullable<System.DateTime>
    										_obj.NGAYHETHANTHE = null;//Nullable<System.DateTime>
    										_obj.NGAYMUADAUTIEN = null;//Nullable<System.DateTime>
    										_obj.NGAYMUACUOICUNG = null;//Nullable<System.DateTime>
    									_obj.ISUSE = null;//Nullable<bool>
    									_obj.ISDELETE = null;//Nullable<bool>
    							        return _obj;
        }
    
    	public QUANLYTHETHEOKHACHHANG CloneNew(QUANLYTHETHEOKHACHHANG objQUANLYTHETHEOKHACHHANG)
    	{
    		if(objQUANLYTHETHEOKHACHHANG==null) return null;
    			 QUANLYTHETHEOKHACHHANG objNew = Find(objQUANLYTHETHEOKHACHHANG.KHCARDMANAGERID);
    			if(objNew !=null) return null;
    
    		 objNew =  CreateNew();
    		 				objNew.KHCARDMANAGERID =  objQUANLYTHETHEOKHACHHANG.KHCARDMANAGERID;
    								objNew.MAKHACHHANG =  objQUANLYTHETHEOKHACHHANG.MAKHACHHANG;
    								objNew.MATHE =  objQUANLYTHETHEOKHACHHANG.MATHE;
    								objNew.NGAYCAPTHE =  objQUANLYTHETHEOKHACHHANG.NGAYCAPTHE;
    								objNew.NGAYHETHANTHE =  objQUANLYTHETHEOKHACHHANG.NGAYHETHANTHE;
    								objNew.NGAYMUADAUTIEN =  objQUANLYTHETHEOKHACHHANG.NGAYMUADAUTIEN;
    								objNew.NGAYMUACUOICUNG =  objQUANLYTHETHEOKHACHHANG.NGAYMUACUOICUNG;
    								objNew.TONGTICHLUY =  objQUANLYTHETHEOKHACHHANG.TONGTICHLUY;
    								objNew.STATUS =  objQUANLYTHETHEOKHACHHANG.STATUS;
    								objNew.ISUSE =  objQUANLYTHETHEOKHACHHANG.ISUSE;
    								objNew.ISDELETE =  objQUANLYTHETHEOKHACHHANG.ISDELETE;
    						  objNew.isAdd = true;
    		 return objNew;
    	}
    
    	public QUANLYTHETHEOKHACHHANG CloneUpdate(QUANLYTHETHEOKHACHHANG objQUANLYTHETHEOKHACHHANG)
    	{
    		if(objQUANLYTHETHEOKHACHHANG==null) return null;
    		 QUANLYTHETHEOKHACHHANG objNew = Find(objQUANLYTHETHEOKHACHHANG.KHCARDMANAGERID);
    		 if(objNew==null) return null;
    		 				objNew.KHCARDMANAGERID =  objQUANLYTHETHEOKHACHHANG.KHCARDMANAGERID;
    								objNew.MAKHACHHANG =  objQUANLYTHETHEOKHACHHANG.MAKHACHHANG;
    								objNew.MATHE =  objQUANLYTHETHEOKHACHHANG.MATHE;
    								objNew.NGAYCAPTHE =  objQUANLYTHETHEOKHACHHANG.NGAYCAPTHE;
    								objNew.NGAYHETHANTHE =  objQUANLYTHETHEOKHACHHANG.NGAYHETHANTHE;
    								objNew.NGAYMUADAUTIEN =  objQUANLYTHETHEOKHACHHANG.NGAYMUADAUTIEN;
    								objNew.NGAYMUACUOICUNG =  objQUANLYTHETHEOKHACHHANG.NGAYMUACUOICUNG;
    								objNew.TONGTICHLUY =  objQUANLYTHETHEOKHACHHANG.TONGTICHLUY;
    								objNew.STATUS =  objQUANLYTHETHEOKHACHHANG.STATUS;
    								objNew.ISUSE =  objQUANLYTHETHEOKHACHHANG.ISUSE;
    								objNew.ISDELETE =  objQUANLYTHETHEOKHACHHANG.ISDELETE;
    						 objNew.isUpdate = true;
    		 return objNew;
    	}
    	public QUANLYTHETHEOKHACHHANG Clone(QUANLYTHETHEOKHACHHANG objQUANLYTHETHEOKHACHHANG)
    	{
    		if(objQUANLYTHETHEOKHACHHANG==null) return null;
    		 QUANLYTHETHEOKHACHHANG objNew = Find(objQUANLYTHETHEOKHACHHANG.KHCARDMANAGERID);
    		 if(objNew==null) 
    		 {
    		 objNew =  CreateNew();
    		 				objNew.KHCARDMANAGERID =  objQUANLYTHETHEOKHACHHANG.KHCARDMANAGERID;
    								objNew.MAKHACHHANG =  objQUANLYTHETHEOKHACHHANG.MAKHACHHANG;
    								objNew.MATHE =  objQUANLYTHETHEOKHACHHANG.MATHE;
    								objNew.NGAYCAPTHE =  objQUANLYTHETHEOKHACHHANG.NGAYCAPTHE;
    								objNew.NGAYHETHANTHE =  objQUANLYTHETHEOKHACHHANG.NGAYHETHANTHE;
    								objNew.NGAYMUADAUTIEN =  objQUANLYTHETHEOKHACHHANG.NGAYMUADAUTIEN;
    								objNew.NGAYMUACUOICUNG =  objQUANLYTHETHEOKHACHHANG.NGAYMUACUOICUNG;
    								objNew.TONGTICHLUY =  objQUANLYTHETHEOKHACHHANG.TONGTICHLUY;
    								objNew.STATUS =  objQUANLYTHETHEOKHACHHANG.STATUS;
    								objNew.ISUSE =  objQUANLYTHETHEOKHACHHANG.ISUSE;
    								objNew.ISDELETE =  objQUANLYTHETHEOKHACHHANG.ISDELETE;
    						  objNew.isAdd = true;
    		 }
    		 else
    		 {
    		 				objNew.MAKHACHHANG =  objQUANLYTHETHEOKHACHHANG.MAKHACHHANG;
    								objNew.MATHE =  objQUANLYTHETHEOKHACHHANG.MATHE;
    								objNew.NGAYCAPTHE =  objQUANLYTHETHEOKHACHHANG.NGAYCAPTHE;
    								objNew.NGAYHETHANTHE =  objQUANLYTHETHEOKHACHHANG.NGAYHETHANTHE;
    								objNew.NGAYMUADAUTIEN =  objQUANLYTHETHEOKHACHHANG.NGAYMUADAUTIEN;
    								objNew.NGAYMUACUOICUNG =  objQUANLYTHETHEOKHACHHANG.NGAYMUACUOICUNG;
    								objNew.TONGTICHLUY =  objQUANLYTHETHEOKHACHHANG.TONGTICHLUY;
    								objNew.STATUS =  objQUANLYTHETHEOKHACHHANG.STATUS;
    								objNew.ISUSE =  objQUANLYTHETHEOKHACHHANG.ISUSE;
    								objNew.ISDELETE =  objQUANLYTHETHEOKHACHHANG.ISDELETE;
    						 objNew.isUpdate = true;
    		  objNew.isLoaded = true;
    		 }
    		 return objNew;
    	}
    
    	public List< QUANLYTHETHEOKHACHHANG> Clone(IList<QUANLYTHETHEOKHACHHANG> listQUANLYTHETHEOKHACHHANGs)
    	{
    		List< QUANLYTHETHEOKHACHHANG> lst = new List< QUANLYTHETHEOKHACHHANG>();
    		if(listQUANLYTHETHEOKHACHHANGs == null) return lst;
    		foreach(var obj in  listQUANLYTHETHEOKHACHHANGs)
    		{
    			 lst.Add(Clone(obj));
    		}
    		return lst;
    	}
    
    	public QUANLYTHETHEOKHACHHANG getObject(string id)
    	{
    		return QueryableList().FirstOrDefault(p => p.IDUnit == id);
    	}
    
    	public QUANLYTHETHEOKHACHHANG getObject(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate)
    	{
    		return  Queryable().FirstOrDefault(predicate);
    	}
    
    	 public string GetMaxCode()
         {
    		return QueryableList().Max(s=>s.IDUnit).ToString();
         }
    
    	 public List<QUANLYTHETHEOKHACHHANG> Search(string textSearch)
    	 {
    		List<QUANLYTHETHEOKHACHHANG> listIDUnit = QueryableList().Where(p=>p.IDUnit == textSearch).ToList();
    		if (listIDUnit.Count != 0)
    		{
        		return listIDUnit;
    		}
    		else
    		{
        		listIDUnit = QueryableList().Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
        		return listIDUnit.Count == 0
        		? QueryableList().Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
        		: listIDUnit;
    		}
    	 }
    
    	public List<QUANLYTHETHEOKHACHHANG> Search(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate)
    	{
    		return  Queryable().Where(predicate).ToList();
    	}
    
    	public List<QUANLYTHETHEOKHACHHANG> Search(Expression<Func<QUANLYTHETHEOKHACHHANG, bool>> predicate,string textSearch)
    	{
    			List<QUANLYTHETHEOKHACHHANG> listIDUnit = Search(predicate).Where(p => p.IDUnit == textSearch).ToList();
                if (listIDUnit.Count != 0)
                {
                    return listIDUnit;
                }
                else
                {
                    listIDUnit = Search(predicate).Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
                    return listIDUnit.Count == 0
                    ? Search(predicate).Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
                    : listIDUnit;
                }
    	}
    }
}
