//------------------------------------------------------------------------------
// <auto-generated>
// Repository Generated
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.DataContext;
using Repository.Pattern.Ef6;
using Repository.Pattern.Repositories;
using Repository.Pattern.UnitOfWork;
using Util.Pattern;
using WH.Entity;
using System;

namespace WH.Service.Repository
{
    public partial interface IPHIEUTHURepository : IRepositoryAsync<PHIEUTHU>
    {
    	bool Exist(string id);
    	bool Exist(Expression<Func<PHIEUTHU, bool>> predicate);
    	PHIEUTHU getObject(string id);
    	PHIEUTHU getObject(Expression<Func<PHIEUTHU, bool>> predicate);
    	
    
    	PHIEUTHU CreateNew();
    	PHIEUTHU CloneNew(PHIEUTHU objPHIEUTHU);
    	PHIEUTHU CloneUpdate(PHIEUTHU objPHIEUTHU);
    	PHIEUTHU Clone(PHIEUTHU objPHIEUTHU);
    
    	List< PHIEUTHU> Clone(IList<PHIEUTHU> listPHIEUTHUs);
    	string GetMaxCode();
    	List<PHIEUTHU> Search(string textSearch);
    	List<PHIEUTHU> Search(Expression<Func<PHIEUTHU, bool>> predicate);
    	List<PHIEUTHU> Search(Expression<Func<PHIEUTHU, bool>> predicate,string textSearch);
    }
    
    public partial class PHIEUTHURepository : Repository<PHIEUTHU>, IPHIEUTHURepository
    {
    	public string DefaultCode
        {
    		get { return null; }
        }
    
        public PHIEUTHURepository(IDataContextAsync context, IUnitOfWorkAsync unitOfWork) : base(context, unitOfWork)
        {
        }
    
        public PHIEUTHURepository(IUnitOfWorkAsync unitOfWork)
                : base(unitOfWork)
        {
        }
    
    	public bool Exist(string id)
        {
    		return QueryableList().Any(p => p.IDUnit == id);
        }
    
    	public bool Exist(Expression<Func<PHIEUTHU, bool>> predicate)
    	{
    		return Queryable().Any(predicate);
    	}
    
    	public PHIEUTHU CreateNew()
        {
    		
    		PHIEUTHU _obj = Create();
    
    				//_obj.HOADONXUATKHO = null;//object
    		_obj.MAHOADONXUATKHO = null;//string
    									_obj.MAHOADONTHU = string.Empty;//string
    					_obj.DIENGIAI = string.Empty;//string
    						_obj.NGAYTHANHTOAN = null;//Nullable<System.DateTime>
    							        return _obj;
        }
    
    	public PHIEUTHU CloneNew(PHIEUTHU objPHIEUTHU)
    	{
    		if(objPHIEUTHU==null) return null;
    			 PHIEUTHU objNew = Find(objPHIEUTHU.MAPHIEUTHU);
    			if(objNew !=null) return null;
    
    		 objNew =  CreateNew();
    		 				objNew.MAPHIEUTHU =  objPHIEUTHU.MAPHIEUTHU;
    								objNew.MAHOADONTHU =  objPHIEUTHU.MAHOADONTHU;
    								objNew.MAHOADONXUATKHO =  objPHIEUTHU.MAHOADONXUATKHO;
    								objNew.TIENTHANHTOAN =  objPHIEUTHU.TIENTHANHTOAN;
    								objNew.DIENGIAI =  objPHIEUTHU.DIENGIAI;
    								objNew.MACA =  objPHIEUTHU.MACA;
    								objNew.NGAYTHANHTOAN =  objPHIEUTHU.NGAYTHANHTOAN;
    						  objNew.isAdd = true;
    		 return objNew;
    	}
    
    	public PHIEUTHU CloneUpdate(PHIEUTHU objPHIEUTHU)
    	{
    		if(objPHIEUTHU==null) return null;
    		 PHIEUTHU objNew = Find(objPHIEUTHU.MAPHIEUTHU);
    		 if(objNew==null) return null;
    		 				objNew.MAPHIEUTHU =  objPHIEUTHU.MAPHIEUTHU;
    								objNew.MAHOADONTHU =  objPHIEUTHU.MAHOADONTHU;
    								objNew.MAHOADONXUATKHO =  objPHIEUTHU.MAHOADONXUATKHO;
    								objNew.TIENTHANHTOAN =  objPHIEUTHU.TIENTHANHTOAN;
    								objNew.DIENGIAI =  objPHIEUTHU.DIENGIAI;
    								objNew.MACA =  objPHIEUTHU.MACA;
    								objNew.NGAYTHANHTOAN =  objPHIEUTHU.NGAYTHANHTOAN;
    						 objNew.isUpdate = true;
    		 return objNew;
    	}
    	public PHIEUTHU Clone(PHIEUTHU objPHIEUTHU)
    	{
    		if(objPHIEUTHU==null) return null;
    		 PHIEUTHU objNew = Find(objPHIEUTHU.MAPHIEUTHU);
    		 if(objNew==null) 
    		 {
    		 objNew =  CreateNew();
    		 				objNew.MAPHIEUTHU =  objPHIEUTHU.MAPHIEUTHU;
    								objNew.MAHOADONTHU =  objPHIEUTHU.MAHOADONTHU;
    								objNew.MAHOADONXUATKHO =  objPHIEUTHU.MAHOADONXUATKHO;
    								objNew.TIENTHANHTOAN =  objPHIEUTHU.TIENTHANHTOAN;
    								objNew.DIENGIAI =  objPHIEUTHU.DIENGIAI;
    								objNew.MACA =  objPHIEUTHU.MACA;
    								objNew.NGAYTHANHTOAN =  objPHIEUTHU.NGAYTHANHTOAN;
    						  objNew.isAdd = true;
    		 }
    		 else
    		 {
    		 				objNew.MAHOADONTHU =  objPHIEUTHU.MAHOADONTHU;
    								objNew.MAHOADONXUATKHO =  objPHIEUTHU.MAHOADONXUATKHO;
    								objNew.TIENTHANHTOAN =  objPHIEUTHU.TIENTHANHTOAN;
    								objNew.DIENGIAI =  objPHIEUTHU.DIENGIAI;
    								objNew.MACA =  objPHIEUTHU.MACA;
    								objNew.NGAYTHANHTOAN =  objPHIEUTHU.NGAYTHANHTOAN;
    						 objNew.isUpdate = true;
    		  objNew.isLoaded = true;
    		 }
    		 return objNew;
    	}
    
    	public List< PHIEUTHU> Clone(IList<PHIEUTHU> listPHIEUTHUs)
    	{
    		List< PHIEUTHU> lst = new List< PHIEUTHU>();
    		if(listPHIEUTHUs == null) return lst;
    		foreach(var obj in  listPHIEUTHUs)
    		{
    			 lst.Add(Clone(obj));
    		}
    		return lst;
    	}
    
    	public PHIEUTHU getObject(string id)
    	{
    		return QueryableList().FirstOrDefault(p => p.IDUnit == id);
    	}
    
    	public PHIEUTHU getObject(Expression<Func<PHIEUTHU, bool>> predicate)
    	{
    		return  Queryable().FirstOrDefault(predicate);
    	}
    
    	 public string GetMaxCode()
         {
    		return QueryableList().Max(s=>s.IDUnit).ToString();
         }
    
    	 public List<PHIEUTHU> Search(string textSearch)
    	 {
    		List<PHIEUTHU> listIDUnit = QueryableList().Where(p=>p.IDUnit == textSearch).ToList();
    		if (listIDUnit.Count != 0)
    		{
        		return listIDUnit;
    		}
    		else
    		{
        		listIDUnit = QueryableList().Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
        		return listIDUnit.Count == 0
        		? QueryableList().Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
        		: listIDUnit;
    		}
    	 }
    
    	public List<PHIEUTHU> Search(Expression<Func<PHIEUTHU, bool>> predicate)
    	{
    		return  Queryable().Where(predicate).ToList();
    	}
    
    	public List<PHIEUTHU> Search(Expression<Func<PHIEUTHU, bool>> predicate,string textSearch)
    	{
    			List<PHIEUTHU> listIDUnit = Search(predicate).Where(p => p.IDUnit == textSearch).ToList();
                if (listIDUnit.Count != 0)
                {
                    return listIDUnit;
                }
                else
                {
                    listIDUnit = Search(predicate).Where(p => p.TextSearchCoDau.Contains(textSearch.Replace(" ", "").ToLower())).ToList();
                    return listIDUnit.Count == 0
                    ? Search(predicate).Where(p => p.TIMKIEM.Contains(textSearch.ToUnsign().Replace(" ", "").ToLower())).ToList()
                    : listIDUnit;
                }
    	}
    }
}
